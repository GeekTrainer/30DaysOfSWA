"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"devtools-playwright","metadata":{"permalink":"/blog/devtools-playwright","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-17.md","source":"@site/blog/2021-05-17.md","title":"#16: Test Automation with Playwright","description":"Welcome to Week 3, Day 2 of #30DaysOfSWA!!","date":"2021-05-17T00:00:00.000Z","formattedDate":"May 17, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"dev-tools","permalink":"/blog/tags/dev-tools"},{"label":"playwright","permalink":"/blog/tags/playwright"}],"readingTime":6.16,"truncated":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Debbie O\'Brien","title":"Senior PM @Microsoft @Playwright","url":"https://github.com/debs-obrien","imageURL":"https://github.com/debs-obrien.png","key":"debbie"}],"frontMatter":{"slug":"devtools-playwright","title":"#16: Test Automation with Playwright","authors":["nitya","debbie"],"tags":["swa","30days","dev-tools","playwright"],"draft":false},"nextItem":{"title":"#15: Develop with Azure Tools","permalink":"/blog/devtools-azure"}},"content":"Welcome to `Week 3, Day 2` of **#30DaysOfSWA**!! \\n\\nYesterday we kicked off \\"Developer Tools\\" week by talking about the end-to-end developer experience associated with building modern web applications. Today we focus on a key segment - **testing**. Let\'s look at what test automation means for modern web applications, and how [Playwright](https://www.playwright.dev) can help you automate end-to-end testing of your Azure Static Web App.\\n\\n## What We\'ll Cover\\n * Test Automation for Modern Web Apps\\n * What is Playwright?\\n * Get Started With Playwright\\n * Explore Playwright Tools\\n * Use Playwright with SWA\\n * **Exercise**: Try the Tutorial with **your** deployed app.\\n\\n![](../static/img/series/16-banner.png)\\n\\n## Test Automation\\n\\nModern mobile web applications have to work correctly and consistently across all modern browsers (like Chromium, Firefox or WebKit) and the device platforms they run on (with varying screen sizes, orientations). Testing your application UI/UX **manually** becomes difficult when we think about the granularity of tests across these combinations. Testing manually becomes impossible when we factor in the frequency at which testing needs to be done to validate these on every code commit or pull request. This is where test automation shines!\\n\\nTest Automation is about executing tests **automatically** to validate software specs, then using the reported insights to improve software quality iteratively. For web apps, this requires tools that can _automate test actions in the browser_ (web automation) and support this consistently _across browsers_. **[This is where Playwright shines!](https://www.playwright.dev)**\\n \\n## Playwright Overview\\n\\nPlaywright is an open-source framework for **reliable** end-to-end testing of modern web apps. It features a built-in [Playwright Test Runner](https://playwright.dev/docs/1.21/intro) for automating test execution, and supports a [Playwright Library](https://playwright.dev/docs/1.21/library) to simplify integration into third-party solutions.\\n\\n![Visual Guide to Playwright](../static/img/series/16-playwright.jpg)\\n\\nThis visual guide shows the key features of the framework ([downloadable hi-res version here](https://github.com/SketchTheDocs/cloud-skills/blob/main/gallery/Playwright-03-Overview.png)) with these useful features:\\n * **Unified API** - you write tests once, they run on all browsers and devices.\\n * **Mobile Web Testing** - rich set of device profiles, usable with native emulators.\\n * **Multi-Language Support** -  write tests in Java, JS/TS, Python or C#.\\n * **Reliable Testing** - no flaky tests thanks to auto-waiting and web-first assertions\\n * **Powerful Tooling** - get help authoring, debugging, profiling, and reporting, tests.\\n * **Full Isolation** - browser contexts (in just ms), options to parallelize tests\\n\\nCheck out the Playwright [documentation](https://playwright.dev/docs/1.21/intro) and [API](https://playwright.dev/docs/1.21/api/class-playwright) for more details. \\n\\n**What kinds of things can we test with Playwright?** \\n\\n * Test if UI component behaviors work as expected (events)\\n * Test if UI workflows are correct (navigation, inputs)\\n * Test UX behaviors in different contexts (with fixtures)\\n * Modify network traffic (auth, proxy etc.) for testing\\n * Validate behaviors under network conditions (modified)\\n * Validate behaviors for device contexts (emulated profiles)\\n * Automate capture of evidence (videos, screenshots) in tests\\n\\nExplore the **[Guides](https://playwright.dev/docs/1.21/library)** and **[Demo.Playwright](https://github.com/MarcusFelling/Demo.Playwright#run-playwright-example-tests)** for usage examples. And check out **[Debbie\'s playwright-testing](https://dev.to/debs_obrien/series/17445)** series for more examples of Playwright in action.\\n\\n## Playwright Quickstart\\n\\nIt\'s time to get some hands-on experience with Playwright. Check out the [Getting Started](https://playwright.dev/docs/1.21/intro) guide on their site for reference. \\n\\nHowever, we\'d like to walkthrough it with a real-world example in mind and figure out how to go from the boilerplate setup to the start of a basic script and configuration that sets us up to do more for testing our Azure Static App.\\n\\n**#30DaysOfSWA Website Example: Step-by-Step Tutorial**: \\n\\nCheck out [this repository](https://github.com/fearlessly-dev/30daysofSWA-testing) that I setup today, to use the quickstart guide as a basis for setting up end-to-end testing for the [#30DaysOfSWA](https://aka.ms/30DaysOfSWA) website! The [README](https://github.com/fearlessly-dev/30daysofSWA-testing) documents the following steps in detail:\\n\\n * [Setup Testing Repo](https://github.com/fearlessly-dev/30daysofSWA-testing#2-where-should-my-tests-be)\\n * [Install Playwright](https://github.com/fearlessly-dev/30daysofSWA-testing#3-how-do-i-install-playwright)\\n * [Explore Boilerplate (setup)](https://github.com/fearlessly-dev/30daysofSWA-testing#4-what-did-the-installation-do)\\n * [Run Default Test](https://github.com/fearlessly-dev/30daysofSWA-testing#5-what-can-i-do-with-this)\\n * [View Generated Test Report](https://github.com/fearlessly-dev/30daysofSWA-testing#6-what-does-the-report-show)\\n * [Automate Tests with GitHub Actions](https://github.com/fearlessly-dev/30daysofSWA-testing#7-what-about-those-github-actions)\\n * [View Actions-Generated Report Assets](https://github.com/fearlessly-dev/30daysofSWA-testing#8-viewing-actions-generated-reports)\\n * [Customize Default Script/Config for *My* App](https://github.com/fearlessly-dev/30daysofSWA-testing/blob/main/README.md#9-lets-customize-the-script)\\n * [The Joy Of Trace Logs!!](https://github.com/fearlessly-dev/30daysofSWA-testing/blob/main/README.md#the-joys-of-trace-logs)\\n * **You Did It!**\\n\\nBy the end of this tutorial you should have:\\n * A starter test script customized for **your** application\\n * A test configuration file **with tracing on** to capture detailed profiling data\\n * A GitHub Actions workflow that **automates test runs** with each codebase change.\\n\\n![Test Run Report](https://github.com/fearlessly-dev/30daysofSWA-testing/raw/main/my-report-detail.png)\\n\\n\\nAt this point, you are now ready to build on this:\\n * add more tests to your `example.spec.js` file => **see: [Playwright Test API](https://playwright.dev/docs/test-annotations)**\\n * configure your test run in `playwright.config.js`. => **see:[Configuration Object](https://playwright.dev/docs/test-configuration)**\\n\\n## Playwright Tooling\\n\\nIn the tutorial above, we mentioned some Playwright tools (CLI, TraceViewer, HTML Reporter, Codegen) in passing. Playwright has a really powerful set of tools that can streamline your end-to-end testing experience from _authoring_ to _reporting_. \\n\\n**Start by familiarizing yourself with the [Playwright CLI](https://playwright.dev/docs/cli)**. \\n\\nIt\'s the main launching pad for all other command-line utilities. Using the CLI you can navigate to pages (_\\"open\\"_), install browser dependencies (_\\"install\\"_), take screenshots (_ \\"screenshot\\"_), launch the test runner (_\\"test\\"_), author tests (_\\"codegen\\"_), view traces (_\\"show-trace\\"_) and more. \\n\\nLaunch the CLI as follows:\\n\\n```\\nnpx playwright <command> [options]\\n```\\nUse `npx playwright --help` for details on commands and options supported in your installed CLI version. Want a deeper dive?\\n\\n * Check out Nitya\'s **[Tool Talk Post](https://dev.to/azure/005-tool-talk-hello-command-line-faj)** for detailed coverage.\\n * Download this handy **[hi-res visual guide](https://cloud-skills.dev/gallery/Playwright-01-CommandLine.png)** as a cheatsheet\\n \\n**Usage Example**: \\n\\nLet\'s use the `screenshot` command to capture an image of the kickoff post from the #30DaysOfSWA website for an \\"iPhone 6\\" device profile. You can see the [named device profiles](https://github.com/microsoft/playwright/blob/f1307f4a4d92490d7d0e7ee5a6a7fe9a22804e86/packages/playwright-core/src/server/deviceDescriptorsSource.json) currently supported for reference.\\n\\n```\\nnpx playwright screenshot --device \\"iPhone 6\\" https://www.azurestaticwebapps.dev/blog/kickoff 30Days.png\\n\\nNavigating to https://www.azurestaticwebapps.dev/blog/kickoff\\nCapturing screenshot into 30Days.png\\n```\\n\\n| **Result:** This is what the saved image looks like. |\\n|:--|\\n| ![Screenshot](../static/img/series/30Days.png) |\\n\\n\\n**Then start exploring these tools**: \\n * [Inspector](https://playwright.dev/docs/inspector) - a GUI-based tool for debugging test execution\\n * [TraceViewer](https://playwright.dev/docs/trace-viewer) - a GUI-based tool to explore recorded test traces\\n * [Codegen](https://playwright.dev/docs/codegen) - an authoring tool to generate tests based on user interactions\\n * [Debugging](https://playwright.dev/docs/debug) - additional tools to support runtime debugging\\n * [Reporters](https://playwright.dev/docs/test-reporters) - built-in reporters of different types\\n\\n---\\n\\n## What\'s Next\\n\\nWe covered a lot today. \\n\\nAt this point, you should know what Playwright its, and why it\'s useful for automating tests for  modern web applications. You should have a sense of the powerful developer tools it has, and understand how to setup and configure it for use with your Azure Static Web App. And you should have a clean basis for building up your test suite.\\n\\nSo where can we go next to skill up? We have you covered:\\n * **[Watch this repository](https://github.com/fearlessly-dev/30daysofSWA-testing)** I setup today. I hope to continue adding more tests that can walk through various Playwright features with a deployed SWA,, and use that to explore both the Playwright capabilities and SWA-specific features or usage.\\n * **Join us tomorrow** when we explore a \\"Multi-Stage Deployment with Azure DevOps\\" demo that shows you a full-stack application with Playwright tests integrated. Learn interesting aspects - like using SWA environment variables to define test parameters - that highlight best practices for test setup in SWA.\\n * **Last but not least**, check out this talk from last year for more insights into End-to-End Testing for Playwright from the Azure Static Web Apps Team.\\n\\n    <iframe  width=\\"560\\" height=\\"315\\" frameborder=\\"0\\"  src=\\"https://aka.ms/docs/player?ev=learn-tv-static-web-apps-code-to-scale&session=end-to-end-testing-with-playwright\\"></iframe>\\n\\n\\n## Exercise\\n\\nPick one of the apps you\'ve built (or use) - preferably one that is currently deployed to Azure Static Web Apps so you can explore other scenarios later.\\n\\n[Walk through the same steps](https://github.com/fearlessly-dev/30daysofSWA-testing) with **your** deployed app - then try adding one new test script that goes beyond the starter test case. Look at the [demo](https://github.com/MarcusFelling/Demo.Playwright) project for inspiration!"},{"id":"devtools-azure","metadata":{"permalink":"/blog/devtools-azure","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-16.md","source":"@site/blog/2021-05-16.md","title":"#15: Develop with Azure Tools","description":"Welcome to Week 3, Day 1 of #30DaysOfSWA!!","date":"2021-05-16T00:00:00.000Z","formattedDate":"May 16, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"dev-tools","permalink":"/blog/tags/dev-tools"}],"readingTime":7.635,"truncated":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"devtools-azure","title":"#15: Develop with Azure Tools","authors":["nitya"],"tags":["swa","30days","dev-tools"],"draft":false},"prevItem":{"title":"#16: Test Automation with Playwright","permalink":"/blog/devtools-playwright"},"nextItem":{"title":"#14: Show & Tell: A SWArm Of Apps","permalink":"/blog/show-and-tell"}},"content":"Welcome to `Week 3, Day 1` of **#30DaysOfSWA**!! \\n\\nWe just crossed the halfway mark on #30DaysOfSWA! We covered core concepts in Week 1, and explored usage examples in Week 2. Today we kick off week 3 with a focus on **_Developer Tools_!** Let\'s dive in!\\n\\n\\n## What We\'ll Cover\\n * What does the Developer Experience look like?\\n * Explore: Azure CLI\\n * Explore: Azure Portal\\n * Explore: Azure Core Functions Tools\\n * **Exercise:** Explore Azure Portal & CLI docs for SWA.\\n\\n![](../static/img/series/15-banner.png)\\n\\n## Dev Experience\\n\\nWhen we think about building a modern web application, we\'re also thinking about our _developer experience_. By [one definition](https://microsoft.github.io/code-with-engineering-playbook/developer-experience/#defining-end-to-end), developer experience refers to how easy or difficult it is for us, as developers, to perform the required tasks to implement the desired outcome. \\n\\nIn the case of application development, the tasks often involve:\\n * **Building** the project from source (after creating the codebase)\\n * **Testing** project behaviors (to validate compliance with requirements)\\n * **Deploying** the project (to staging or production environments)\\n * **Debugging** the project (to fix issues, audit performance etc.)\\n\\nHaving the right **developer tools** can make all the difference between a productive developer workflow and a painful one. This week, we\'ll look at the many tools and services available, that make the Azure Static Web Apps Developer Experience more seamless.\\n\\n * **Azure Dev Tools |** What are the core tools for working with Azure?\\n * **Playwright |** How can we implement end-to-end testing for our app?\\n * **CI/CD|** How can we automate build/deploy workflows?\\n * **Edge DevTools** How can we debug and profile apps in the browser?\\n * **SWA CLI** How can we simplify local development for static web apps?\\n * **Visual Studio Code** How can we supercharge our IDE-driven experience?\\n\\nIn today\'s post we\'ll look at the main tools that make it easy for modern web application developers to build static web apps on Azure:\\n * [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/) - a command-line interface to create and manage Azure resources\\n * [Azure Portal](https://docs.microsoft.com/en-us/azure/azure-portal/) - a web-based unified console alternative to the Azure CLI.\\n * [Azure SWA CLI](https://github.com/Azure/static-web-apps-cli) - a _local development tool_ for Azure Static Web Apps\\n * [Azure Functions Core Tools](https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local) - a _local development tool_ for Azure Functions.\\n * [Azure Extensions for Visual Studio Code](https://code.visualstudio.com/docs/azure/extensions) for seamless access from IDE.\\n\\nWe\'ll coverAzure SWA CLI and VS Code extensions in greater detail later this week. \\n\\n## New to Azure?\\n\\nWe assume you are familiar with cloud computing concepts like resources, resource groups, subscriptions and services. If not, that\'s okay. Now\'s a good time to take a detour and explore **[Azure Fundamentals](https://docs.microsoft.com/en-us/learn/paths/az-900-describe-cloud-concepts/)** - a 6-part learning series that will take you through the core concepts, services, solutions, security features, identity & governance aspects, and cost management features available on Azure. \\n\\nIf you\'re a JavaScript or Node.js developer new to Azure, bookmark these links:\\n * [Azure SDKs](https://azure.github.io/azure-sdk/releases/latest/js.html) for service integrations in your preferred programming language.\\n * [Azure for JavaScript Developers](https://docs.microsoft.com/en-us/azure/developer/javascript/) for guides and samples\\n * [Tools for JS Developers on Azure](https://docs.microsoft.com/en-us/azure/developer/javascript/node-azure-tools) with [configuration tips](https://docs.microsoft.com/en-us/azure/developer/javascript/core/configure-local-development-environment?tabs=bash)\\n\\n\\n## Azure CLI\\n\\nNow that you\'re familiar with core Azure concepts, let\'s talk about how you can _create and manage_ your cloud resources on Azure. The **[Azure CLI](https://docs.microsoft.com/en-us/cli/azure/what-is-azure-cli)** is a _cross-platform_ command-line tool that connects you securely to Azure, to execute commands on Azure resources interactively (or via scripts) from a terminal.\\n\\nThe easiest way to familiarize yourself with the Azure CLI commands is to [install and run it in Azure Cloud Shell](https://docs.microsoft.com/en-us/cli/azure/get-started-with-azure-cli#install-or-run-in-azure-cloud-shell) **in your browser** - no local installation needed. Follow [these instructions](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli) to then install it locally in your development environment. Validate your install by testing out the core `az` command.\\n\\n```bash\\naz --version\\n```\\n\\nThere Azure CLI can manage most Azure Services out of the box. Here is **[list of supportred services](https://docs.microsoft.com/en-us/cli/azure/azure-services-the-azure-cli-can-manage)** along with links to quickstart documentation for each. As web developers, you may find the **[web-related subset of services](https://docs.microsoft.com/en-us/cli/azure/azure-services-the-azure-cli-can-manage#web)** worth exploring - everything from App Service and API Management, to Azure Static Web Apps.\\n\\nUse the following command to get interactive help with supported commands and options in this context.\\n\\n```\\naz staticwebapp --help\\n```\\n\\nWith the CLI you can manage app settings, create and delete static apps, manage the static app\'s environment and associated functions, oversee information related to identity, users and secrets associated with the app, and more.\\n\\n * Explore the **[az staticwebapp](https://docs.microsoft.com/en-us/cli/azure/staticwebapp?view=azure-cli-latest)** reference to learn relevant commands and options.\\n * Then **[build your first static web app](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-cli?tabs=vanilla-javascript)** using the Azure CLI.\\n\\n## Azure Portal\\n\\nIf you prefer a unified web-based console for managing your Azure resource interactions, the [Azure Portal](https://docs.microsoft.com/en-us/azure/azure-portal/) provides a **graphical user interface alternative to the Azure CLI**. The portal is designed for _continuous availability_. Here\'s a snapshot of what the Azure Portal layout looks like. Browse the following documents to get a deeper dive into its capabilities:\\n\\n * Understand the [components of the Azure Portal](https://docs.microsoft.com/en-us/azure/azure-portal/azure-portal-overview#getting-around-the-portal) in this document.\\n * Then learn to [navigate the portal](https://docs.microsoft.com/en-us/learn/modules/tour-azure-portal/3-navigate-the-portal) in this tutorial.\\n * Or follow the [Azure Quickstart Center](https://docs.microsoft.com/en-us/azure/azure-portal/azure-portal-quickstart-center) guided tour.\\n \\nThen, try to  **[build your first static web app](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-portal?tabs=vanilla-javascript)** using the Azure Portal to get hands-on experience with the developer workflow from creation to deployment.\\n\\n![](https://docs.microsoft.com/en-us/learn/modules/tour-azure-portal/media/3-portal.png)\\n\\n\\n## Functions Core Tools\\n\\nAzure Static Web Apps uses [Azure Functions](https://docs.microsoft.com/en-us/azure/azure-functions/) to support serverless API capability for the app. Learn more about this in our earlier post on [API-enabling SWA](./2021-05-04.md) where we talked about  _Managed Functions_ (created and managed by Azure Static Web Apps) and _Bring Your Own Functions_ (independently created and managed) options for adding serverless API support to your static web application.\\n\\nThe [Azure Functions Core Tools](https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=v4%2Cmacos%2Ccsharp%2Cportal%2Cbash#install-the-azure-functions-core-tools) - aka `func` - supports **local development** with a command-line tool to create, test, and even deploy, your functions to Azure. Once installed, use the following to get interactive help with the supported commands and options for this tool:\\n\\n```\\nfunc --help\\n```\\n\\nYou should see something like this **(some output abbreviated for clarity)** giving you a sense of the main operations you can perform from this CLI.\\n\\n```\\nAzure Functions Core Tools\\nCore Tools Version:       4.0.3971 ...\\nFunction Runtime Version: 4.0.1.16815\\n\\nUsage: func [context] [context] <action> [-/--options]\\n\\nContexts:\\nazure       Commands to log in to Azure and manage resources\\ndurable     Commands for working with Durable Functions\\nextensions  Commands for installing extensions\\nfunction    Commands for creating and running functions locally\\nhost        Commands for running the Functions host locally\\nkubernetes  Commands for working with Kubernetes and Azure Functions\\nsettings    Commands for managing environment settings for the local Functions host\\ntemplates   Commands for listing available function templates\\n\\nActions: \\nstart   Launches the functions runtime host  \\n    --port [-p]     Local port to listen on. \\n                    Default: 7071\\n..\\n..\\n```\\n\\n\\nExplore the documentation to learn how you can:\\n * [Install the Azure Functions Core Tools](https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local)\\n * [Create a local Functions project](https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=v4%2Cmacos%2Ccsharp%2Cportal%2Cbash#create-a-local-functions-project)\\n * [Run and test Functions locally](https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=v4%2Cmacos%2Ccsharp%2Cportal%2Cbash#start)\\n * [Publish Functions to Azure](https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=v4%2Cmacos%2Ccsharp%2Cportal%2Cbash#publish)\\n\\nLater this week, we\'ll do a deep-dive into the **[Azure Static Web Apps CLI](https://github.com/Azure/static-web-apps-cli)** - a local development commandline tool for Azure Static Web Apps, that works seamlessly with the Azure Functions Core Tool, to deliver an unified developer experience for creating and testing your API-enabled Static Web Apps projects.\\n\\nThe combination of **Azure CLI** (to manage Azure resources from command line), **Azure Functions Core Tools** (to manage Azure Functions local development and deploy) and **Azure Static Web Apps CLI** (to manage SWA local development and deploy) provides a seamless command-line driven developer experience for web developers on Azure.\\n\\n## Azure Extensions\\n\\nBut what if you prefer an IDE-based approach? Visual Studio Code has you covered. In a post Later this week, we\'ll look in depth at the key Visual Studio Code Extensions you can use, to supercharge your developer experience from code to cloud, right inside the IDE. For now, I\'ll leave you with these resources:\\n\\n * Read the [Azure Extensions](https://code.visualstudio.com/docs/azure/extensions) documentation to learn how to find, and install, relevant extensions in VS Code.\\n * Explore the [Deploying Applications To Azure](https://code.visualstudio.com/docs/azure/deployment) page for hands-on tutorials for VS Code - including one for [Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript) and one for [Azure Functions](https://docs.microsoft.com/azure/javascript/tutorial-vscode-serverless-node-01)\\n * Search the [VS Code Marketplace](https://marketplace.visualstudio.com/search?term=Microsoft&target=VSCode&category=Azure&sortBy=Relevance) for relevant extensions from both Microsoft and the broader developer community.\\n\\nHere is a snapshot of extensions currently published by **Microsoft** in the **Azure** category, sorted by **Trending** metrics. You can see the [Azure Static Web Apps Extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) listed here -- we\'ll cover that in more detail in the final post of this week!\\n\\n![](../static/img/series/15-extensions.png)\\n\\n\\n## Exercise\\nWow - we covered a lot today!! But don\'t worry about having to remember all of it. The goal was to raise awareness of _which_ tool to use, _when_, and _why_. Your exercise today:\\n\\n*  pick either **Azure Portal** or **Azure CLI** documentation for Azure Static Web Apps, and familiarize yourself with the many commands, settings and options available. \\n\\n * Try the default quickstart for that option - then explore other commands with the deployed Static Web App to get a real sense of how this works.\\n\\n## Resources\\n * [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/) documentation - with [Static Web Apps Quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-cli?tabs=vanilla-javascript)\\n * [Azure Portal](https://docs.microsoft.com/en-us/azure/azure-portal/) documentation - with [Static Web Apps Quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-portal?tabs=vanilla-javascript)\\n * [Azure SWA CLI](https://github.com/Azure/static-web-apps-cli) documentation\\n * [Azure Functions Core Tools](https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local) documentation\\n * [Azure SDKs](https://azure.github.io/azure-sdk/releases/latest/js.html) for JavaScript and other languages\\n * [Azure Extensions for Visual Studio Code](https://code.visualstudio.com/docs/azure/extensions)"},{"id":"show-and-tell","metadata":{"permalink":"/blog/show-and-tell","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-15.md","source":"@site/blog/2021-05-15.md","title":"#14: Show & Tell: A SWArm Of Apps","description":"Welcome to Week 2, Day 7 of #30DaysOfSWA!!","date":"2021-05-15T00:00:00.000Z","formattedDate":"May 15, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"usage-examples","permalink":"/blog/tags/usage-examples"}],"readingTime":6.5,"truncated":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"show-and-tell","title":"#14: Show & Tell: A SWArm Of Apps","authors":["nitya"],"tags":["swa","30days","usage-examples"],"draft":false},"prevItem":{"title":"#15: Develop with Azure Tools","permalink":"/blog/devtools-azure"},"nextItem":{"title":"#13: Hosting PWA on Static Web Apps","permalink":"/blog/pwa-on-swa"}},"content":"Welcome to `Week 2, Day 7` of **#30DaysOfSWA**!! \\n\\nWe made it to the end of Week 2!! **Let\'s give ourselves a round of applause!**\\n\\nIn the last week we walked through a subset of usage examples featuring diverse applications, static site generators and front-end frameworks. And that\'s still just a small slice of what is possible. So how do you make this journey more actionable and _learn by doing_?\\n\\nThat\'s what I\'ll try to answer in today\'s post. Also **bookmark this one** because we will revisit it at the end of next week (\\"Dev Tools\\") and try to replicate some of these tutorials using the more streamlined experience provided by the [**Azure Static Web Apps CLI**](https://aka.ms/swa-cli) (a command-line tool for local development).\\n\\n\\n## What We\'ll Cover\\n * **Recap**: Usage Examples Week\\n * **Build**: How to Get Project Ideas\\n * **Share**: Contribute to the Gallery\\n * **Simplify**: Using Static Web Apps CLI!\\n * **Exercise**: Build, Deploy, and Customize, some starter app.x\\n\\n![](../static/img/series/14-banner.png)\\n\\n\\n## Week 2 Recap\\n\\nThis week was packed with different usage scenarios and front-end technologies. Let\'s take a quick look at what was covered:\\n\\n * **Monday:** We built a [personal blog](https://dev.to/azure/08-build-a-blog-with-astro-1lb2) using [Astro](https://astro.build/).\\n * **Tuesday:** We built an [inventory management](https://dev.to/azure/09-manage-inventory-with-react-39lc) app using [React](https://reactjs.org/)\\n * **Wednesday:** We [got creative](https://dev.to/azure/10-get-creative-with-vuejs-33k1) with [Vue](https://vuejs.org/), ML and Game Engines!\\n * **Thursday:** We [published content](https://dev.to/azure/11-share-content-with-docusaurus-azure-static-web-apps-30hc) using [Docusaurus](https://docusaurus.io/)\\n * **Friday:** We explore [headless CMS](https://dev.to/azure/12-headless-cms-swa-built-with-blazor-1e2d) examples using [Blazor WebAssembly](http://blazor.net/)\\n * **Saturday:** We learned to make SWA a more [progressive web app](https://dev.to/azure/13-hosting-pwa-on-static-web-apps-16la)\\n\\nThe visual roadmap gives you a sense of what was covered each day. But this is just the tip of the iceberg. JavaScript developers have a wide variety of front-end frameworks and static site generators to work with. And, as we saw with Blazor WebAssembly, non-JavaScript developers have other frameworks they use to develop modern web applications. So, how can you continue the learn-by-doing journey? Read on for some ideas.\\n\\n\\n![Week 2 Roadmap](../static/img/series/week2-roadmap.png)\\n\\n## Project Ideas\\n\\n### 1. Static Sites\\n\\nThe easiest way to get started is to use one of many [static site generators](https://jamstack.org) available today. Most of these provide templates you can start with, and customize just by bringing your own content (data, media assets etc.). Need some inspiration? Take a look at the recently released [Rising Stars Of JavaScript: Static Sites](https://risingstars.js.org/2021/en#section-ssg) list and see if any of those projects have starters you can repurpose.\\n\\n**Example: My \\"Recipe Me\\" Project**. \\n\\nEarlier this week, we covered examples with Astro (#2), Docusarus (#3) and VuePress (#9) in our usage examples. Today we look at [Eleventy](https://www.11ty.dev/) (#7).\\n\\nEarlier this year I ran [#30DaysOfPWA](https://dev.to/azure/07-developing-progressive-web-apps-hfb), a similar series focused on Progressive Web Apps. And I wanted a demo! I\'ve always wanted to have a recipe blog, and I found [this Eleventy starter](https://github.com/maeligg/my-online-cookbook) that was perfect. I customized it to add the features and code required to make it PWA-compliant. And I configured it for hosting on Azure Static Web Apps. **Bonus:** I learned a lot in the process about the framework, and the configuration changes for SWA!\\n\\n![Recipe Me](../static/img/series/14-recipeme.png) \\n\\n**Related Resources:**\\n\\n * [Read the Tutorial](https://dev.to/azure/07-developing-progressive-web-apps-hfb)\\n * [Browse the Source](https://github.com/fearlessly-dev/recipe-me)\\n * [Visit the Website](https://white-rock-036691f0f.1.azurestaticapps.net/)\\n\\n### 2. Frameworks\\n\\nThe next step up from this is to look at existing application starter-kits or tutorials that target popular front-end and full-stack frameworks. Unlike static site generators (which are content-centric) these apps let you explore advanced user interactions that can benefit from SWA concepts like serverless API and authentication support. Need some inspiration? Take a look at the recently released [Rising Stars Of JavaScript: Front-end Frameworks](https://risingstars.js.org/2021/en#section-framework) list and see if any of those projects have starters you can repurpose.\\n\\n**Example:  Simona\'s \\"Sticker Shop\\" Project**. \\n\\nCheck out this example from Simona Cotin (currently a Principal PM on the Static Web Apps team) which forked the [Strapi e-commerce starter](https://strapi.io/blog/strapi-starter-nuxt-js-e-commerce) and adapted it for deployment on Azure Static Web Apps. The Strapi [tutorial](https://strapi.io/blog/strapi-starter-nuxt-js-e-commerce) talks you through the setup and structure of the application - making it a perfect place to explore just adding SWA integrations. **Bonus:** Simona\'s deployment also takes advantage of SWA\'s _custom domain_ support, making the app accessible at the [https://aswa.cloud](https://aswa.cloud) domain.\\n\\n![Sticker Shop](../static/img/series/14-simona-stickers.png) \\n\\n**Related Resources:**\\n\\n * [Read the Tutorial](https://strapi.io/blog/strapi-starter-nuxt-js-e-commerce)\\n * [Browse the Source](https://github.com/simonaco/sticker-shop)\\n * [Visit the Website](https://www.aswa.cloud/)\\n\\n### 3. OSS Apps\\n\\nSometimes, you find the right application not because of the framework - but because its a use case that really resonates with you - even if you are not necessarily familiar with the underlying technology. These projects are great because your interest in the end result makes you more curious to dig under the hood, improving your understanding of new applicaton architectures and tooling. Need some inspiration? My favorite starting point is the [awesome](https://github.com/sindresorhus/awesome) repo which is a directory of `awesome-XYZ` lists for a given technology `XYZ`. Many of these lists identify tutorials, open-source projects and starter template repos that can be the basis for your experiments!\\n\\n**Example:  My \\"Google Codelabs\\" Project**. \\n\\nIf you\'ve attended any Google Developer events or community conferences, chances are you\'ll have encountered their [Codelabs](https://codelabs.developers.google.com/) site - a repository of step-by-step tutorials that cover a wide range of technologies. But did you know that they [open-sourced the codelabs management and hosting tools](https://github.com/googlecodelabs/tools)? \\n\\nThe underlying tooling uses Golang but the actual content is written in Markdown, and converted into the required static files by [`claat`](https://github.com/googlecodelabs/tools/tree/main/claat), the \\"Code Labs As A Tool\\" utility. Follow along to create your own codelabs - and host them on Azure Static Web Apps. **Bonus:** The hosted app *is* the tutorial for how it was created. Isn\'t that meta?\\n\\n![Google Codelabs](../static/img/series/14-codelabs.png) \\n\\n**Related Resources:**\\n\\n * [Read the Tutorial](https://medium.com/@zarinlo/publish-technical-tutorials-in-google-codelab-format-b07ef76972cd)\\n * [Browse the Source](https://github.com/nitya/swa-googlecodelabs)\\n * [Visit the Website](https://agreeable-bush-016b49e0f.1.azurestaticapps.net/#0)\\n\\n\\n## Share: Gallery\\n\\nWe\'ve talked about Project ideas that help **you** learn by repurposing the open-source projects, tutorials or templates generated by others. Now let\'s talk about paying it forward by **sharing** your project to inspire others.\\n\\nThat is the purpose of the [Static Web Apps Showcase](/showcase) that we will be debuting before the end of May. You can see a sneak preview of what the app gallery looks like, allowing developers to search for projects that have _live_ deployments and _open source_ codebases, and use one of the listed front-end technologies. **Bookmark this post or track the _Showcase_ link on this site, to know when the Showcase feature goes live!** Be the first to submit a project for some of the more recent technologies added to that list!\\n\\n![SWA Gallery](../static/img/swa-showcase.png) \\n\\n## Simplify: SWA CLI\\n\\nOne last thing. In all the usage examples and tutorial so far, we\'ve typically emphasized either the **IDE** option (using the Visual Studio Code SWA extension) or the **Azure Portal** option (activated by the `Deploy to Azure` button configured on repo README). \\n\\nBut what if you could do everything from the command-line - from initializing your project configuration, to building and testing your application locally, to deploying it to the cloud in a production or preview environment? That\'s the promise behind the [Azure Static Web Apps CLI](https://aka.ms/swa-cli). **Join us May 19 for a special #SWAanniversary event** for some exciting announcements in this context.\\n\\nThen bookmark and revisit this page later in May for an updated section where we discuss how we can further simplify and streamline our \\"learn by doing\\" projects with this tool!\\n\\n## Exercise\\n\\nWe\'ve looked at various resources you can start with, to scaffold a real-world application that you can then configure for SWA deployment and further customization. Go ahead and pick something and expand on the app to create something new. Then contribute it to [our upcoming Showcase](/showcase) project!\\n\\nNeed more inspiration? I\'m a fan of React, but I\'ve wanted to explore [Preact](https://preactjs.com/) as a performant alternative with a comparable API. The [Preact Demos](https://preactjs.com/about/demos-examples/) page has a rich set of examples - including this [Homepage Generator](https://thomaswood.me/) which is a perfect 1-page resume template you can customize for **your** profile. _Try it out!_"},{"id":"pwa-on-swa","metadata":{"permalink":"/blog/pwa-on-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-14.md","source":"@site/blog/2021-05-14.md","title":"#13: Hosting PWA on Static Web Apps","description":"Welcome to Week 2, Day 6 of #30DaysOfSWA!!","date":"2021-05-14T00:00:00.000Z","formattedDate":"May 14, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"usage-examples","permalink":"/blog/tags/usage-examples"}],"readingTime":7.025,"truncated":false,"authors":[{"name":"Maxim Salnikov","title":"Developer Relations @Microsoft","url":"https://twitter.com/webmaxru","imageURL":"https://github.com/webmaxru.png","key":"max"}],"frontMatter":{"slug":"pwa-on-swa","title":"#13: Hosting PWA on Static Web Apps","authors":["max"],"tags":["swa","30days","usage-examples"],"draft":false},"prevItem":{"title":"#14: Show & Tell: A SWArm Of Apps","permalink":"/blog/show-and-tell"},"nextItem":{"title":"#12: Headless CMS & SWA With Blazor","permalink":"/blog/build-with-blazor"}},"content":"Welcome to `Week 2, Day 6` of **#30DaysOfSWA**!! \\n\\nYesterday we talked about deploying Blazor apps on Static Web Apps. Let\'s continue today with one more type of the projects you can successfully host on SWA - Progressive Web Apps (PWAs).\\n\\n## What We\'ll Cover\\n * How do I start with building a PWA?\\n * Optimized PWA-on-SWA configuration\\n * Advanced techniques for better user experience\\n * **Exercise:** [Deploy your PWA on SWA, run offline, and install it](https://github.com/webmaxru/pwa-on-swa)\\n\\n![](../static/img/series/13-banner.png)\\n\\n## Progressive Web Applications\\n\\nA **Progressive Web App (PWA)** is a web frontend application that is progressively enhanced using open web technologies, to make sure it delivers the best possible experience on every device, based on available capabilities. The \\"baseline\\" for your app to have a title \\"progressive\\" is its installability and offline-readiness. We skip the \\"served with https\\" requirement because it became a baseline for any web app these days.\\n\\n![#30DaysOfPWA - Core Concepts](../static/img/series/13-pwa-30days.jpg)\\n\\nThis chapter of #30DaysOfSWA assumes that you are familiar with the basic concepts of a Service Worker API and automating your service worker with the Workbox library. If you wish to learn about these technologies, you are welcome to go through the Core Concepts part of the **[#30DaysOfPWA](https://aka.ms/30DaysOfPWA)** project (see roadmap above) to learn about PWA fundamentals and to watch **[Automating a service worker with the Workbox 6](https://www.youtube.com/watch?v=LILGt_pHk9M&ab_channel=NDCConferences)** video for quickstart with Workbox.\\n\\n## Is hosting a PWA on Azure Static Web Apps different from \\"classic\\" apps?\\n\\nA Progressive Web Application is still a web frontend app so the initial scaffolding of your SWA resource is the same - you have learned how to deploy and configure various types of web apps from the previous chapters of the #30DaysOfSWA. But to make sure that your \\"PWA on SWA\\" works as intended both online & offline to provide the best possible user & developer experiences, you might need to pay special attention to some implementation details and fine-tune some configuration options. We\'ll go through the following points in this chapter:\\n\\n- Building your service worker as a part of the overall app build\\n- Setting up HTML5 routing - for the Single-Page Application (SPA) use-case\\n- Applying caching strategies for SWA-hosted APIs\\n- Showing custom error pages\\n- How to deal with authentication in PWA\\n\\n**Sample project**\\n\\nI created a **[PWA on SWA Starter](https://github.com/webmaxru/pwa-on-swa)** project with all the best practices implemented. The app is [hosted on SWA](https://aka.ms/pwa-on-swa) as shown below. Let\'s explore it!\\n\\n![PWA Starter on SWA](../static/img/series/13-pwa-starter.png)\\n\\n**Technical stack:**\\n\\n- A React application scaffolded by the [create-react-app](https://reactjs.org/docs/create-a-new-react-app.html) tool. A simple SPA with a few routes and the possibility to call API endpoints. Note that the approaches described are applicable for any web frontend application: **framework-based** (including your custom frameworks) or **\\"vanilla\\" JavaScript**. We use React only for getting closer to the real-world scenario of the modern frontend app development when you have to perform some operations with your source code (\\"build the app\\") before the deployment.\\n- A [service worker](https://github.com/webmaxru/pwa-on-swa/blob/main/src/sw/service-worker.js) powered by the [Workbox](https://workboxjs.org) library.\\n- Two API endpoints created within SWA resource - to emulate \\"dynamic\\" (`/api/news`) and \\"conservative\\" (`/api/archives`) data sources.\\n\\n## Building your service worker as a part of the overall app build\\n\\nThe service worker file we have in the `src/sw` folder of the application is not ready for the deployment. We have to\\n\\n1. **[Process it](https://github.com/webmaxru/pwa-on-swa/blob/main/scripts/sw-build.js)** by the `workbox-build` module to populate with the resources to precache (to provide offline-readiness)\\n2. **Bundle it**\\n3. **Choose** production or development mode\\n4. **Minify** for deployment\\n\\nThis is why in `package.json`\'s `scripts` we have `\\"build-sw\\": \\"node scripts/sw-build.js && npx rollup -c\\"` command that is building a service worker file and copies it into the app distribution folder.\\n\\nBy default, Azure Static Web Apps runs `npm run build` command to build your application. So do not forget to add a service worker build command there. The resulting  command will be:\\n\\n```\\n\\"build\\": \\"react-scripts build && npm run build-sw\\"\\n```\\n\\nInstead of `react-scripts build`, there might be a command to build an application using a framework/bundler of your choice. **Important**: Keep this order - you always build a service worker _after_ the main application because the distribution folder will be scanned to list the files to precache based on the [pattern](https://github.com/webmaxru/pwa-on-swa/blob/main/scripts/sw-build.js#L5) you provided.\\n\\n## Setting up HTML5 routing - for the Single-Page Application (SPA)\\n\\nFor having correct navigation in your single-page application, you have to \\"ask\\" the webserver to redirect all navigation requests to `index.html` - to run the application and let it do the routing. In SWA, you have to have something like this in the [configuration file](https://github.com/webmaxru/pwa-on-swa/blob/main/staticwebapp.config.json):\\n\\n```\\n\\"navigationFallback\\": {\\n  \\"rewrite\\": \\"index.html\\",\\n  \\"exclude\\": [\\"/images/*.{png,jpg,gif}\\", \\"/static/*\\"]\\n}\\n```\\n\\n**Best practices**:\\n\\n- Always \\"exclude\\" as much as possible in `navigationFallback` - it will help you to identify and fix \\"resource not found\\" errors.\\n- Do not copy `staticwebapp.config.json` to the app distribution folder - SWA will find it in any location within the app source code.\\n\\nIn case of PWA, there is an extra layer of this fallback: the first in a row to handle navigation requests is a service worker. In the [service-worker.js](https://github.com/webmaxru/pwa-on-swa/blob/main/src/sw/service-worker.js) we have to have the following block for correct routing in SPAs:\\n\\n```\\nconst navHandler = createHandlerBoundToURL(\'/index.html\');\\nconst navigationRoute = new NavigationRoute(navHandler, {\\n  denylist: [\\n    new RegExp(\'^/images/\'),\\n    new RegExp(\'^/static/\'),\\n  ],\\n});\\nregisterRoute(navigationRoute);\\n```\\n\\nThe above configuration will work fine for opening both root url and \\"deep links\\" like `/about` both in online and offline modes. \\n\\n## Showing custom error pages\\n\\nIt\'s a best practice to create and show custom error pages (for example for 404 Not Found) instead of the ones built-in in the browsers. And it makes sense to keep these pages as simple as possible - without running a SPA itself. To set up custom error pages, you add the following block to the [SWA config](https://github.com/webmaxru/pwa-on-swa/blob/main/staticwebapp.config.json)\\n\\n```\\n\\"responseOverrides\\": {\\n  \\"400\\": {\\n    \\"rewrite\\": \\"/400.html\\"\\n  },\\n  \\"404\\": {\\n    \\"rewrite\\": \\"/404.html\\"\\n  }\\n}\\n```\\n\\nThese pages will be excluded from SWA\'s navigation fallback automatically because these two html are in the app distribution folder. But for the Workbox and explicit directive needed - just add these addresses to the same `denylist` we met with the HTML5 navigation section.\\n\\n\\n## Applying caching strategies for SWA-hosted APIs\\n\\nWith Workbox, runtime caching is simple: you specify a url pattern to \\"listen\\" and intercept, and a caching strategy to apply. There are [5 strategies](https://developer.chrome.com/docs/workbox/modules/workbox-strategies/) available and you can always create a custom one. By default, all API urls start with `/api`. Then in a [service worker](https://github.com/webmaxru/pwa-on-swa/blob/main/src/sw/service-worker.js), we\'ll add this block for caching responses from our two API endpoints using different strategies:\\n\\n```\\nregisterRoute(\\n  ({ url }) => url.pathname.startsWith(\'/api/news\'),\\n  new NetworkFirst()\\n);\\n\\nregisterRoute(\\n  ({ url }) => url.pathname.startsWith(\'/api/archives\'),\\n  new CacheFirst()\\n);\\n```\\n\\nNow, the data from APIs, once fetched, is also available offline!\\n\\n**Mini-exercise**: Open the [hosted PWA on SWA Starter](https://aka.ms/pwa-on-swa), open the Network tab of DevTools, and click on two buttons in the \\"API caching\\" demo area. What difference do you see in the network request/response patterns for these two strategies?\\n\\n## How to deal with authentication in PWA\\n\\nA couple of **important** rules here:\\n\\n1. Explicitly exclude the `.auth` system folder of SWA from Workbox\'s navigation fallback (use `denylist`) and never set up runtime caching for it\\n2. Never runtime-cache all data users fetch from restricted API endpoints (served by SWA or external)\\n\\nAnd it\'s a **best practice** to never precache and always exclude from the service worker\'s navigation fallback all urls related to the user authentication and restricted parts of your application. [Have a look](https://github.com/webmaxru/pwa-on-swa/blob/main/src/sw/service-worker.js#L27) at the resulting `denylist` of our sample application.\\n\\n## Exercise: Deploy your PWA on SWA, run offline, and install it!\\n\\nHopefully, you\'re ready to try something fun that will reinforce what you learned today. \\n\\nFor this exercise:\\n\\n* [Fork the PWA on SWA Starter repository](https://github.com/webmaxru/pwa-on-swa) and deploy it to Azure Static Web Apps using the skills you gained in the previous chapters of the #30DaysOfSWA\\n* Open the url you received after the SWA resource was created\\n* Now, go offline (disconnect from the Internet or emulate offline mode in the DevTools) and reload the page - it still works!\\n* Using the \\"App available\\" icon on the right-hand side of the desktop browser\'s address bar, install the application on your laptop - now it behaves like a native one!\\n\\n---\\n\\n## Resources\\n\\n\\nHere are some resources to get you started with your Progressive Web App journey into \\n\\n * [PWA on Microsoft Docs](https://aka.ms/learn-pwa)\\n * [#30DaysOfPWA](https://aka.ms/30DaysOfPWA)\\n * [Workbox library](https://workboxjs.org)"},{"id":"build-with-blazor","metadata":{"permalink":"/blog/build-with-blazor","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-13.md","source":"@site/blog/2021-05-13.md","title":"#12: Headless CMS & SWA With Blazor","description":"Welcome to Week 2, Day 5 of #30DaysOfSWA!!","date":"2021-05-13T00:00:00.000Z","formattedDate":"May 13, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"usage-examples","permalink":"/blog/tags/usage-examples"},{"label":"blazor","permalink":"/blog/tags/blazor"}],"readingTime":3.945,"truncated":false,"authors":[{"name":"Justin Yoo","title":"Senior Cloud Advocate @Microsoft","url":"http://devkimchi.com","imageURL":"https://github.com/justinyoo.png","key":"justin"},{"name":"Jeff Fritz","title":"Program Manager @Microsoft","url":"https://github.com/csharpfritz","imageURL":"https://github.com/csharpfritz.png","key":"jeff"}],"frontMatter":{"slug":"build-with-blazor","title":"#12: Headless CMS & SWA With Blazor","authors":["justin","jeff"],"tags":["swa","30days","usage-examples","blazor"],"draft":false},"prevItem":{"title":"#13: Hosting PWA on Static Web Apps","permalink":"/blog/pwa-on-swa"},"nextItem":{"title":"#11: Share Content - with Docusaurus","permalink":"/blog/build-with-docusaurus"}},"content":"Welcome to `Week 2, Day 5` of **#30DaysOfSWA**!! \\n\\nOver the last few days we\'ve been exploring JavaScript-based frameworks for building web apps. Today, we switch our attention to our amazing .NET community and talk about building Static Web Apps with [Blazor](http://blazor.net)\\n\\n## What We\'ll Cover\\n * Introduction: Blazor WebAssembly\\n * Quickstart: Simple Blazor SWA\\n * Advanced: Blazor SWA + Wordpress CMS\\n * **Exercise**: Remix Fritz\'s Hat Collection!\\n\\n![](../static/img/series/12-banner.png)\\n\\n\\n## Blazor WebAssembly\\n\\nWhen we think about web applications, we typically think of developing with JavaScript, HTML, and CSS. In fact, many of you reading this series may identify yourselves as JavaScript developers when discussing modern web apps.\\n\\nWhat if I told you that was not always the case? What if you could **write web applications in C#**, running in a .NET runtime inside the browser! Turns out you can - thanks to [Blazor](https://blazor.net).\\n\\n**What is Blazor?**\\n\\nBlazor is a [framework for building interactive client-side web UI with .NET](https://docs.microsoft.com/en-us/aspnet/core/blazor). Developers can build interactive web applications using C# (instead of JavaScript) - and extend experiences to hybrid desktop and mobile apps with .NET capabilities.\\n\\n**What is Web Assembly?** \\n\\nRunning .NET code inside web browsers is made possible by [WebAssembly](https://webassembly.org/)(`wasm`) - a binary instruction format and open web standard that is designed as a _portable compilation target_ for programming languages. It provides a sandboxed runtime that can be implemented _inside_ JavaScript virtual machines (like those in modern web browsers) to support web apps.\\n\\n**How does Blazor WebAssembly Work?**\\n\\n[Blazor WebAssembly](https://docs.microsoft.com/en-us/aspnet/core/blazor/) is a framework for building single page app (SPA) that works with all modern web browsers, including mobile versions. Blazor apps are written using [Razor](https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-6.0) components in a .NET runtime. The .NET code is then executed via WebAssembly in the browser\'s JavaScript sandbox. WebAssembly uses JavaScript interoperability to get full access to browser features. Learn how [Blazor web apps work](https://docs.microsoft.com/en-us/aspnet/core/blazor/).\\n\\n![](https://docs.microsoft.com/en-us/aspnet/core/blazor/index/_static/blazor-webassembly.png?view=aspnetcore-6.0)\\n\\n## Simple Blazor SWA\\n\\nWant to learn how you can deploy a simple Blazor application to Azure Static Web Apps? We have you covered! Follow [this tutorial](https://docs.microsoft.com/en-us/azure/static-web-apps/deploy-blazor) to learn how to deploy an **existing Blazor app** to Azure Static Web Apps.\\n\\nThe end result will look something like this - a single page Blazor web application that displays weather data _returned from a serverless API_ - beginning with [this starter app](https://github.com/login?return_to=/staticwebdev/blazor-starter/generate),\\n\\n![Quickstart demo](../static/img/series/12-swa-quickstart.png)\\n\\n\\n---\\n\\n## Blazor SWA and Wordpress\\n\\nWant to try a more complex example? Check out [this advanced tutorial](https://dev.to/azure/blazor-webassembly-for-headless-cms-on-azure-static-web-apps-412c) (from Justin Yoo). Here\'s a brief introduction:\\n\\n> One of the most popular scenarios to build a static website is to run a blog site for myself or my organisation. WordPress is the most popular service for this purpose. Now, you want to migrate your WordPress blog site to a static website, but it doesn\'t look easy.\\n\\n> What if you still want to use the WordPress site to write content but only want to refresh the UI outside the site? What if you can even use C# for it through Blazor WebAssembly? You are now able to use the existing WordPress site as the data source of truth and build a UI in a separate instance with your preferred method. Does that sound attractive?\\n\\nJoin Justin as he walks through the steps required to: \\n * use the serviced Wordpress instance as a headless CMS\\n * build the Blazor WebAssembly app using Wordpress\\n * host the completed app on Azure Static Web Apps\\n\\nThe end result issomething like this. \\n **[Read the blog post behind this!!](https://dev.to/azure/blazor-webassembly-for-headless-cms-on-azure-static-web-apps-412c)**.\\n\\n![Final demo](../static/img/series/12-swa-wordpress.png)\\n\\n---\\n\\n## Exercise: Remix Fritz\'s Hats!\\n\\nHopefully you\'re ready to try something fun that will reinforce what you learned today. \\n\\n**Say Hello to (Jeff) Fritz\'s Really Cool Hats**\\n\\n[Fritz\'s Really Cool Hats](https://hats.csharpfritz.com/) is an open-source static web site built with Blazor WebAssembly, incorporating C# Azure Functions and Azure Storage, and deployed using Azure Static Web Apps. The project was created by **Jeff Fritz** - the face behind many Twitch livestreams and the popular [Beginners Series To Blazor](https://docs.microsoft.com/en-us/shows/beginners-series-to-blazor/).\\n\\n[**Visit The Deployed Site**](https://hats.csharpfritz.com/)\\n\\n![Hats demo](../static/img/series/12-swa-fritz.png)\\n\\nFor this exercise:\\n\\n* [Fork the repository](https://github.com/csharpfritz/Fritz.HatCollection) and clone it locally.\\n* Open project in Visual Studio - press F5 to launch (app and api).\\n* Configure [your Azure Storage account](https://github.com/csharpfritz/Fritz.HatCollection#data-storage) to add your own images\\n* Use the [quickstart](https://aka.ms/blazor-swa/quickstart) to deploy to Azure Static Web Apps.\\n\\nExplore the source and the GitHub Actions files in the original repository to understand how the app is structured. Then share your deployed project with us by tagging a tweet with #30DaysOfSWA.\\n\\n---\\n\\n## Resources\\n\\nHere are some resources to get you started with your Blazor journey into \\n\\n * [Blazor: Build Client Web Apps With C#](https://blazor.net)\\n * [Beginner\'s Series to: Blazor](https://docs.microsoft.com/en-us/shows/beginners-series-to-blazor/)\\n * [Tutorial: Build a Static Web App with Blazor](https://docs.microsoft.com/en-us/azure/static-web-apps/deploy-blazor)\\n * [Fritz.HatCollection - Source](https://github.com/csharpfritz/Fritz.HatCollection), Jeff Fritz\\n * [Headless CMS Example - Source](https://github.com/justinyoo/blazor-wasm-azfunc-aswa), Justin Yoo"},{"id":"build-with-docusaurus","metadata":{"permalink":"/blog/build-with-docusaurus","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-12.md","source":"@site/blog/2021-05-12.md","title":"#11: Share Content - with Docusaurus","description":"Welcome to Week 2, Day 4 of #30DaysOfSWA!!","date":"2021-05-12T00:00:00.000Z","formattedDate":"May 12, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"usage-examples","permalink":"/blog/tags/usage-examples"},{"label":"react","permalink":"/blog/tags/react"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":7.165,"truncated":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"build-with-docusaurus","title":"#11: Share Content - with Docusaurus","authors":["nitya"],"tags":["swa","30days","usage-examples","react","docusaurus"],"draft":false},"prevItem":{"title":"#12: Headless CMS & SWA With Blazor","permalink":"/blog/build-with-blazor"},"nextItem":{"title":"#10: Get Creative - with Vue.js","permalink":"/blog/build-with-vuejs"}},"content":"Welcome to `Week 2, Day 4` of **#30DaysOfSWA**!! \\n\\nToday\'s a special day - the [1 year anniversary of Azure Static Web Apps](https://azure.microsoft.com/en-us/updates/azure-static-web-apps-is-now-generally-available/?WT.mc_id=30daysofswa-61155-cxall)! <br/> **Happy Birthday SWA! \ud83c\udf82** \\n\\nI wanted to do something special to celebrate - and I thought of just the thing! Let\'s create a content-focused static website [with Docusaurus](https://docusaurus.io/) and deploy it [using Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/?WT.mc_id=30daysofswa-61155-cxall). Want to get a sense of what kinds of static sites you can build with Docusaurus? [Check out their showcase](https://docusaurus.io/showcase)!\\n\\nWhy **this** demo today? Well, it\'s very _Meta_ (pun intended). You may have noticed that the [#30DaysOfSWA](https://aka.ms/30DaysOfSWA) website is built on Docusaurus. \ud83e\udd96\\n\\nBy sharing this tutorial, I\'m hoping it inspires more of you to build/deploy sites that showcase your own tech journeys - whether its with #30Days of learning, or to feature your #100Devs portfolios. #LetsGetStarted! \ud83c\udf89\\n\\n\\n\\n## What We\'ll Cover\\n * **Intro**: What is Docusaurus?\\n * **Quickstart:** setup classic site\\n * **Configure**: `docusaurus.config.js`\\n * **Deploy**: Azure Static Web Apps\\n * **Customize**: Themes & Plugins\\n * **Exercise**: Try extending the demo further \\n\\n![](../static/img/series/11-banner.png)\\n\\n\\n---\\n\\n## About the Demo\\n\\nIn today\'s tutorial, we\'ll create a _classic_ Docusaurus site, deploy it to Azure Static Web Apps, then make some changes to the site content to validate that it rebuilds and deploys the site without any further manual effort from us. I hope to also contribute this back to the Docusaurus docs as an example for Deploying to Azure - feedback to improve this is very welcome!\\n\\n* \ud83c\udf1f **The tutorial source is [here on GitHub](https://github.com/fearlessly-dev/swa-demo-docusaurus)** - I\'ll update **that version** over time.\\n* \ud83c\udf89  **See the site live [on Azure Static Web Apps](https://zealous-bay-0062c640f.1.azurestaticapps.net/)** - for demo purposes only.\\n\\n\\n## What is Docusaurus?\\n\\nDocusaurus is an open-source project from Meta that helps you build, deploy, and maintain, open source project websites. It was rated one of the top 3 [rising stars of JavaScript](https://docusaurus.io/) in 2021, under the _static site generators_ category. It has a number of features that made it attractive:\\n * It has built-in support for search, localization and versioning\\n * It support MDX (JSX-flavored Markdown) for richer content options\\n * It has built-in support for themes and plugins to enhance default behaviors\\n * It is built with React, making it extensible with custom components\\n\\nRead their [documentation](https://docusaurus.io/docs) & visit their [showcase](https://docusaurus.io/showcase) to see real-world examples. Now, let\'s dive into our tutorial for building the demo.\\n\\n---\\n\\n## 1. Setup Site\\n\\n1. Setup a Docusaurus site (`classic` theme) in a dedicated folder (`www`) in repo. The command automatically installs the required packages and their dependencies.\\n\\n```bash\\n npx create-docusaurus@latest www classic\\n```\\n\\n2. Let\'s see what was created for us. The output has been cleaned up for clarity.\\n\\n```\\nls -l www/\\n\\nREADME.md   \\nbabel.config.js \\nblog/              \\ndocs/    \\ndocusaurus.config.js               \\nnode_modules/        \\npackage-lock.json    \\npackage.json           \\nsidebars.js                 \\nsrc/                  \\nstatic/    \\n```\\n\\n3. Let\'s preview the site locally, to validate this worked.\\n\\n```bash\\ncd www\\nnpx docusaurus start\\n\\n[INFO] Starting the development server...\\n[SUCCESS] Docusaurus website is running at http://localhost:3000/.\\n```\\n\\nYou should see something like this - this is the default landing page for the scaffolded Docusaurus site.\\n\\n![Landing Page](../static/img/series/11-landing.png)\\n\\n4. The dev server supports hot reloading. Try making a minor change to the site source - for example edit `docusaurus.config.js` and change the `title` to **\\"My Static Web Apps Site\\"**. You should see this in your site preview, instantly:\\n\\n![Landing Page Reloaded](../static/img/series/11-reload.png)\\n\\n5. You can now build a **production-ready** version of that site as follows. Note that the static files are generated in the **build/** directory.\\n\\n```bash\\ncd www/\\nnpm run build\\n..\\n..\\n[SUCCESS] Generated static files in \\"build\\".\\n[INFO] Use `npm run serve` command to test your build locally.\\n```\\n\\n---\\n\\n## 2. Deploy To Azure\\n\\nDocusaurus is built using React - so you can use [the same configuration settings](https://docs.microsoft.com/en-us/azure/static-web-apps/front-end-frameworks) for Docusaurus, when deploying to Azure Static Web Apps. \\n\\nYou have three options to  get started:\\n * via browser with [the Azure Portal quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=react)\\n  * via terminal with [the Azure CLI quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-cli?tabs=vanilla-javascript)\\n  * via IDE with [the VS Code Extension quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript) \\n\\nIf you prefer the first approach, click the button to go to the Azure portal, then follow the [quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=react) guidance, but using *this* project\'s details instead.\\n\\n[![Deploy to Azure button](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/?feature.customportal=false&WT.mc_id=30daysofswa-61155-cxall#create/Microsoft.StaticApp)\\n\\n## 3... using VS Code\\n\\nI\'ll use the [Visual Studio Code extension](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript) to make this happen with just a few clicks. \\n\\nThe whole process happens within the VS Code window, and takes just a few minutes from start to finish - _with guided prompts to help all the way_. For convenience, I\'ve documented it step-by-step with screenshots (images valid for _VS Code ver 1.66.2_).\\n\\n## 3.1 Install Extension\\n\\nOpen Visual Studio Code (IDE) in the project folder for your repo. Install the [Azure Static Web Apps extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) by visiting this page and clicking \\"Install\\".\\n\\n![VS Code Extension for SWA](../static/img/series/11-extension.png)\\n\\n## 3.2. Find SWA Panel\\n\\nWhen extension is installed, you should see this window in your VS Code editor, confirming readiness for use.\\n\\n![VS Code Extension Installed](../static/img/series/11-vscode.png)\\n\\nYou\'ll find the Azure Static Web Apps options listed in a  section under \\"Azure\\".\\n\\nThe extension\'s [documentation page](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) and its [GitHub](https://github.com/microsoft/vscode-azurestaticwebapps/wiki/Creating-a-Static-Web-App) page both provide detailed walkthroughs - check those for the most current process for this. We\'ll start by clicking the _Azure_ icon in the VS Code sidebar, then scrolling down till we see this `Static Web Apps` section.\\n\\n## 3.3 Create SWA\\n\\nClick the \\"+\\" button to start the **Create Static Web App** workflow.\\n\\n![Activate SWA Extension](../static/img/series/11-swa-plus.png)\\n\\nThe _\\"Create Static Web Apps\\"_ process will create (and commit) a GitHub actions workflow for you that will automate the build/deploy process for your site directly from your source on all future codebase changes.\\n\\nSo if you have _current pending codebase changes_ it will first prompt you to commit them before it does its magic! Let\'s get that done!\\n\\n![Commit changes](../static/img/series/11-commit.png)\\n\\n\\n## 3.4 Configure SWA\\n\\nThe extension walks you through the five steps shown below, each with defaults already filled in for you. Customize them as shown, for this project:\\n\\n| Screenshot | Step |\\n|:---|:---|\\n| ![Step 1](../static/img/series/11-swa-1.png)<br/> | Specify project name |\\n| ![Step 2](../static/img/series/11-swa-2.png) <br/>| Pick Azure region to deploy it in |\\n| ![Step 3](../static/img/series/11-swa-3.png)<br/> | Pick framework used by app |\\n| ![Step 4](../static/img/series/11-swa-4.png)<br/> | Specify folder contaning site source |\\n| ![Step 5](../static/img/series/11-swa-5.png)<br/> | Specify folder where site gets built by default |\\n| | |\\n\\n## 3.5 Track Progress\\n\\nIn a few seconds, you\'ll see this alert - this indicates that the workflow is **creating and committing the GitHub Actions build/deploy workflow YAML** for you. \ud83c\udf89\\n\\n![Created](../static/img/series/11-swa-created.png)\\n\\nIf you check your repository right now, you\'ll find the [relevant commit](https://github.com/fearlessly-dev/swa-demo-docusaurus/commit/1005a16c10bbbce51c8526a3c14253d1aec1a59c) and the [activated Actions flow](https://github.com/fearlessly-dev/swa-demo-docusaurus/actions/runs/2313039968) (labeled `ci: add Azure Static Web Apps worfklow`) in progress.\\n\\nYou can also track the progress and configuration settings of your app right there in the VS Code Sidebar, under the `Static Web Apps` section. _Look for the project name, and unroll contents.._\\n\\n![Sidebar](../static/img/series/11-swa-sidebar.png)\\n\\n\\n## 3.6 Browse Site! \\n\\nIn a few second more, you\'ll get this alert:\\n\\n![Deployed](../static/img/series/11-swa-deployed.png)\\n\\nNow, go to the sidebar section for your project, right-click the name to see the available menu options:\\n\\n![Browse](../static/img/series/11-swa-browse.png)\\n\\nClick \\"Browse Site\\" to be taken to your live deployed Docusaurus website! That\'s it! A few clicks, customizing defaults - and you\'re done!\\n\\n---\\n\\n## 4. Customize It!\\n\\nAt this point, you can make any changes to the site source, commit them - and watch the site get rebuilt and deployed without any further action from you!\\n\\nHere are some things to try:\\n * Customize [styles or layout](https://docusaurus.io/docs/styling-layout)\\n * Explore [plugins](https://docusaurus.io/docs/api/plugins) for SEO, Search etc.\\n * Try [create/use MDX](https://docusaurus.io/docs/markdown-features/react#using-jsx-in-markdown) in content\\n\\nI made a few example changes to the `docusaurus.config.js` file to personalize the landing page content to reflect my needs. \\n\\nAnd I updated the `src/css/custom.css` file to reflect new theme colors for dark/light mode - and replaced the `logo.svg` file.\\n\\nCommitting these changes should automatically rebuild and update the deployed site. Here is what they looked like in my local preview, before I committed the changes.\\n\\n|Light Mode |  Dark Mode|\\n|:---|:---|\\n|![Light Mode](../static/img/series/11-swa-light.png)|![Dark Mode](../static/img/series/11-swa-dark.png) |\\n\\n---\\n\\n\ud83c\udf89  **Check it out: The site is [live on Azure Static Web Apps](https://zealous-bay-0062c640f.1.azurestaticapps.net/)**\\n\\n---\\n\\n## Exercise\\n\\nYou saw a few things I did to customize the site. Now it\'s your turn! Here are a few challenges you can try out:\\n\\n * Complete the tutorial to deploy your own site!\\n * Try Docusaurus customization: **add an MDX component!**\\n * Try SWA customization: **add an API to fetch content!**\\n * Try SWA customization: **add auth using Twitter - use it!**\\n\\n\\n## Resources:\\n * [Docusaurus](https://docusaurus.io/) - documentation\\n * [Azure Static Web Apps (SWA)](https://docs.microsoft.com/en-us/azure/static-web-apps/) - documentation\\n * [#30DaysOfSWA](https://aka.ms/30DaysOfSWA) - guide tour to SWA."},{"id":"build-with-vuejs","metadata":{"permalink":"/blog/build-with-vuejs","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-11.md","source":"@site/blog/2021-05-11.md","title":"#10: Get Creative - with Vue.js","description":"Welcome to Week 2, Day 3 of #30DaysOfSWA!!","date":"2021-05-11T00:00:00.000Z","formattedDate":"May 11, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"usage-examples","permalink":"/blog/tags/usage-examples"}],"readingTime":4.6,"truncated":false,"authors":[{"name":"Jen Looper","title":"Principal Cloud Advocate @Microsoft","url":"https://github.com/jlooper","imageURL":"https://github.com/jlooper.png","key":"jen"}],"frontMatter":{"slug":"build-with-vuejs","title":"#10: Get Creative - with Vue.js","authors":["jen"],"tags":["swa","30days","usage-examples"],"draft":false},"prevItem":{"title":"#11: Share Content - with Docusaurus","permalink":"/blog/build-with-docusaurus"},"nextItem":{"title":"#09: Manage Inventory - with React","permalink":"/blog/build-with-react"}},"content":"Welcome to `Week 2, Day 3` of **#30DaysOfSWA**!! \\n\\nVuelievers, rejoice! Today we\'ll explore several examples of how you can build a Static Web App with [the Vue.js framework](https://vuejs.org/) \\n\\nIn this article, I\'ll give several examples of sites I\'ve created using Vue and [VuePress](https://vuepress.vuejs.org/), a popular way to build static sites with Vue. I\'ll also walk through a game engine we created in VuePress that you can deploy as a SWA, and touch on the use of [Vite.js](https://vitejs.dev/), a lightning-fast toolkit you can use to build all types of applications, built by the masterminds behind the Vue.js projects.\\n\\n## What We\'ll Cover\\nLet\'s explore some creative application usage examples:\\n\\n * **PoseDance:** with PlayFab\\n * **Ombromanie:** with TensorFlow.js\\n * **Olympic App**:  with Vite.js\\n * **Azure Mysteries**: a static Game Engine\\n * **Exercise**: Build a game with VuePress, deploy to SWA!\\n\\n![](../static/img/series/10-banner.png)\\n\\nIn this article, I\'ll describe the following projects, which are more fully explained on their README files in their respective repositories. \\nThe first apps I\'d like to showcase are PoseDance and Ombromanie. Both were developed as conference talks and have become interesting case studies in how to use TensorFlow.js in web apps, specifically focusing on body poses and hand poses for innovative user experiences.\\n\\n## 1. PoseDance \\n\\n![PoseDance](../static/img/series/10-posedance.png)\\n\\nPoseDance is your friendly TikTok trainer: watch a TikTok dance video, learn the dance, then enter a side-by-side view of the original dance with a \'skeleton\' imposed on it to the left, with your own video on the right. Try to make your body poses match that of the dancer, and win a high score!\\n\\nPoseDance offers a full view of SWA capabilities, including an API buildout so that the user can login and save their high scores. To save scores, it also uses [PlayFab](https://playfab.com/) in the backend. In addition this repo has a Code Tour! \\n\\n[Code Tour](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour) is a neat little Visual Studio Code extension that, if installed locally, will allow you to walk through the codebase in a guided manner, to learn the rationale behind code architecture. Install that extension in VS Code and give it a try! \\n\\n**Explore: PoseDance**\\n * Watch the [video](https://www.dropbox.com/s/ccog8uz0tzk10mv/posedance.mp4?dl=0) about the making of PoseDance. \\n * Walk through the conference [slides](https://github.com/jlooper/posedance/blob/master/posedance.pptx). \\n * Explore the [codebase](https://github.com/jlooper/posedance)\\n * Visit the [deployed site]( https://wonderful-ocean-007be220f.1.azurestaticapps.net/) and _Dance with us!_\\n\\n\\n\\n## 2. Ombromanie\\n\\n![Ombromanie](../static/img/series/10-ombromanie.png)\\n\\nOmbromanie is a demo I built for a different conference talk that was described as _\\"un peu OVNI\\"_ (\\"a little UFO-like\\"). In this demo, mimic the hand shadows that you used to make using just a candle and a dark room, to freak out and entertain your siblings. \\n\\nLike PoseDance, this app is also built using Vue.js, and leverages TensorFlow.js and bodyposing - this time focusing on hand poses, which are actually more complex than body poses, as there are more bendable joints in play. \\n\\nUse the Ombromanie app to record a video of your special hand shadow story, coupled with voice-to-text transcription of your story, and then share it. \\n\\n**Explore: Ombromanie**\\n\\n * Read the [blogpost](https://dev.to/azure/ombromanie-creating-hand-shadow-stories-with-azure-speech-and-tensorflow-js-handposes-3cln)\\n * Watch the conference [talk](https://www.youtube.com/watch?v=8Aow0rkp1Lw&ab_channel=MTGFrance)\\n * Walkthrough the conference [slides](https://github.com/jlooper/ombromanie/blob/main/ombromanie.pptx)\\n * Visit the [deployed SWA](https://brave-river-00627910f.1.azurestaticapps.net/) and _Create Hand Shadow Stories!_\\n\\n\\n\\n## 3. 2021 Olympics\\n\\n![Olympic App](../static/img/series/10-olympic.png)\\n\\nFor the [Microsoft Build](https://mybuild.microsoft.com/) conference in 2021, I wanted to demonstrate how to use Vite.js to build a simple \'card flipping\' app. Since it was close to the Summer Olympics, I featured all the Olympic sports in this interesting interface. Building with Vite is similar to building with Vue, although the location of the files is different. _But deployment as a SWA is just as straightforward._\\n\\n**Explore: Olympics App**\\n\\n * Visit the [deployed SWA](https://kind-mushroom-0f7f4200f.1.azurestaticapps.net/) to see it in action.\\n * Watch this [video](https://www.youtube.com/watch?v=Xpl-KukvEmM&ab_channel=MicrosoftDeveloper) and build the app with me!\\n * Explore the [source](https://github.com/jlooper/olympic-app ) and build it yourself!\\n\\nTo build it, start on the student branch and build up the app following the video instructions, or just look at the entire complete codebase.\\n\\n\\n## 4. Azure Mysteries\\n\\nFinally, and something really different, I\'d like you to meet **SpaceQuest**, a game engine that I developed with inspiration and help from my colleague [Chris Noring](https://github.com/softchris). SpaceQuest is a game engine you can use to build your own games, and deploy as a SWA, in the tradition of text-based point and click adventure games.\\n\\n![SpaceQuest](../static/img/series/10-spacequest.png)\\n\\n We used this engine as the core to build the **Azure Maya Mystery** and the **Azure Space Mystery** experiences, all deployed as SWAs to great acclaim. Learn more about these adventures here:\\n\\n**Explore: Azure Maya Mystery**\\n\\n * [Introducing Azure Maya Mystery](https://dev.to/azure/unraveling-the-azure-maya-mystery-and-building-a-world-4pp2)\\n * [The Making of Azure Maya Mystery](https://dev.to/azure/azure-maya-mystery-the-inner-workings-of-a-static-web-app-hkp)\\n * [The Mysterious Cenote](https://dev.to/azure/azure-maya-mystery-part-ii-the-mysterious-cenote-3j57)\\n * [Ascent to the Summit](https://dev.to/azure/azure-maya-mystery-part-iii-ascent-to-the-summit-41hi)\\n\\n**Explore: Azure Space Mystery**\\n * [Introducing Azure Space Mystery](https://dev.to/azure/blast-off-with-azure-advocates-presenting-the-azure-space-mystery-mdd)\\n\\nSpaceQuest had a very special purpose, other than being the seed code of the mysteries, however. We used it in a series of workshops with Autistic students to teach them how to build their own games, in partnership with the National Museum of Computing at Bletchley Park. \\n\\n * Learn about [this work](https://dev.to/azure/making-games-with-autistic-students-a-partnership-between-the-national-museum-of-computing-track-org-and-azure-advocates-3c1e). It was a tremendous honor to work with these talented students!\\n * Try the [deployed SWA](https://zealous-mushroom-04674420f.1.azurestaticapps.net/)\\n * Explore the [source](https://github.com/jlooper/static-game-engine)\\n\\nThen build a mystery of your own by forking the codebase and building up your storyline - and share it with us!\\n\\n\\n## Resources\\n1. [Vue.js](https://vuejs.org/) - The Progressive JavaScript Framework\\n2. [Vite](https://vitejs.dev/) - Next Generation Frontend Tooling\\n3. [VuePress](https://vuepress.vuejs.org) - Vue-powered Static Site Generator\\n4. [Get Started with Vue](https://docs.microsoft.com/en-us/learn/modules/vue-get-started/) - on Microsoft Learn\\n5. [Publish a Vue App with Azure Static Web Apps](https://docs.microsoft.com/en-us/learn/modules/publish-app-service-static-web-app-api/) - on Microsoft Learn\\n6. [Tutorial: Publish a VuePress Site to SWA](https://docs.microsoft.com/en-us/azure/static-web-apps/publish-vuepress)"},{"id":"build-with-react","metadata":{"permalink":"/blog/build-with-react","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-10.md","source":"@site/blog/2021-05-10.md","title":"#09: Manage Inventory - with React","description":"Welcome to Week 2, Day 2 of #30DaysOfSWA!!","date":"2021-05-10T00:00:00.000Z","formattedDate":"May 10, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"usage-examples","permalink":"/blog/tags/usage-examples"},{"label":"react","permalink":"/blog/tags/react"}],"readingTime":2.81,"truncated":false,"authors":[{"name":"Chris Noring","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/chris_noring","imageURL":"https://github.com/softchris.png","key":"chris"}],"frontMatter":{"slug":"build-with-react","title":"#09: Manage Inventory - with React","authors":["chris"],"tags":["swa","30days","usage-examples","react"],"draft":false},"prevItem":{"title":"#10: Get Creative - with Vue.js","permalink":"/blog/build-with-vuejs"},"nextItem":{"title":"#08: Build A Blog - with Astro","permalink":"/blog/build-with-astro"}},"content":"Welcome to `Week 2, Day 2` of **#30DaysOfSWA**!! \\n\\nYesterday we looked at using a static site builder (namely [Astro](https://astro.build)) to create a personal blog and host it with Azure Static Web Apps. Over the next two days, we switch gears and look at using Azure Static Web Apps with some popular _front-end frameworks_ - starting today with [React](https://reactjs.org/).\\n\\n## What We\'ll Cover\\n * Why Learn React?\\n * React + SWA: Quickstart\\n * Build: Inventory Management App\\n * **Exercise:** Build & Deploy a basic React SWA.\\n\\n![](../static/img/series/09-banner.png)\\n\\n\\n## Why Learn React?\\n\\nReact describes itself as [a JavaScript library for building user interfaces](https://reactjs.org/) that targets single-page application (SPA) development with a declarative and component-based approach. Today, it\'s one of the most popular technologies used for web development, leading the [2021 rising stars of JavaScript](https://reactjs.org/) section for front-end frameworks. Whether you\'re new to web development, or an experienced developer, it\'s a technology worth learning.\\n\\nNew to React? Here are a couple of resources:\\n * [Official Tutorial: Intro to React](https://reactjs.org/tutorial/tutorial.html)\\n * [Creating your first web apps with React](https://docs.microsoft.com/en-us/learn/paths/react/) - on Microsoft Learn\\n * [Web Dev For Beginners](https://github.com/microsoft/Web-Dev-For-Beginners) - project-based curriculum\\n\\n`\\n## SWA Quickstart\\n\\nOnce you have a simple React application scaffolded, configuring it to use Azure Static Web Apps is easy. In week 1, we covered the three different approaches (using Visual Studio Code, using Azure Portal, using Azure CLI) to build and deploy a vanillaJS app.\\n\\nWant to try building and deploying a basic React starter app? The Azure Static Web Apps documentation has **Quickstarts** to help! \\n\\nThe following tutorials use the [react-basic](https://github.com/staticwebdev/react-basic) starter template bootstrapped using [create-react-app](https://github.com/facebook/create-react-app). Pick an option based on your preferred development environment:\\n * SWA Quickstart: [Using Visual Studio Code](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=react)\\n * SWA Quickstart: [Using Azure CLI](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-cli?tabs=react)\\n * SWA Quickstart: [Using Azure Portal](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-portal?tabs=react&pivots=azure-devops)\\n\\nThis should help you setup and validate the basic tooling required for developing Azure Static Web Apps. Now, let\'s think about building something a little more functional!\\n\\n\\n## Inventory Mgmt\\n\\nToday, I\'m publishing the first of a _multi-part tutorial_ on how you can build an inventory management app with Azure Static Web Apps and React.\\n\\n[**Read Part 1 of the Tutorial Here**](https://dev.to/azure/build-an-inventory-management-app-with-azure-static-web-apps-with-react-part-1-2l2e):\\n > In this series, I\'ll take you from the very beginning on generating a React app and deploying it within 5 minutes. In the upcoming parts, I\'ll keep building on the same app, and add things like backend and other things.\\n\\n![Banner image from dev.to article](../static/img/series/09-snowpack.png)\\n\\nIn this tutorial you\'ll learn about:\\n * Options to scaffold your React App\\n * Use the `Snowpack` option to scaffold your project\\n * Use VS Code to configure & deploy the app to SWA.\\n\\nCheck out the [deployed SWA](https://happy-wave-036ec970f.1.azurestaticapps.net/) at this stage of the tutorial. In the next part of the series, we\'ll improve UI and add routing support.\\n\\n[**Revisit this series page tomorrow**](https://dev.to/azure/build-an-inventory-management-app-with-azure-static-web-apps-with-react-part-1-2l2e) to continue with the tutorial.\\n\\n## Exercise: Try It!\\n\\nThis is the perfect time to make sure you have your development environment setup and ready to follow along. Try the quickstart option, then follow along with the tutorial series.\\n\\n\\n## Resources\\n\\nHere are the key resources we shared in this article:\\n * SWA Quickstart: [Using Visual Studio Code](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=react)\\n * SWA Quickstart: [Using Azure CLI](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-cli?tabs=react)\\n * SWA Quickstart: [Using Azure Portal](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-portal?tabs=react&pivots=azure-devops)\\n * [Official Tutorial: Intro to React](https://reactjs.org/tutorial/tutorial.html)\\n * [Creating your first web apps with React](https://docs.microsoft.com/en-us/learn/paths/react/) - on Microsoft Learn\\n * [Web Dev For Beginners](https://github.com/microsoft/Web-Dev-For-Beginners) - project-based curriculum"},{"id":"build-with-astro","metadata":{"permalink":"/blog/build-with-astro","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-09.md","source":"@site/blog/2021-05-09.md","title":"#08: Build A Blog - with Astro","description":"Welcome to Week 2, Day 1 of #30DaysOfSWA!!","date":"2021-05-09T00:00:00.000Z","formattedDate":"May 9, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"usage-examples","permalink":"/blog/tags/usage-examples"},{"label":"astro","permalink":"/blog/tags/astro"}],"readingTime":2.92,"truncated":false,"authors":[{"name":"Glaucia Llemos","title":"Cloud Advocate @Microsoft","url":"https://github.com/glaucia86","imageURL":"https://github.com/glaucia86.png","key":"glaucia"}],"frontMatter":{"slug":"build-with-astro","title":"#08: Build A Blog - with Astro","authors":["glaucia"],"tags":["swa","30days","usage-examples","astro"],"draft":false},"prevItem":{"title":"#09: Manage Inventory - with React","permalink":"/blog/build-with-react"},"nextItem":{"title":"#07: Deploying SWA","permalink":"/blog/deploying-swa"}},"content":"Welcome to `Week 2, Day 1` of **#30DaysOfSWA**!! \\n\\nIn Week 1 we covered core concepts for Azure Static Web Apps - from development to API-enablement, security, configuraton and deployment.\\n\\nToday, we kick off Week 2 with a focus on seeing SWA in action - using popular web development frameworks and static site generators to build and deploy different kinds of applications. We kick things off with a look at [Astro](https://astro.build) - a modern static site generator with a BYOF (\\"Bring your own framework\\") approach.\\n\\n\\n## What We\'ll Cover\\n * What is a static site generator?\\n * What is Astro?\\n * Build & Deploy a Personal Blog with Astro\\n * **Exercise:** Try the tutorial to deploy **your** personal blog!\\n\\n![Build a Blog with Astro + SWA](../static/img/series/08-banner.png)\\n\\n## Static Site Generators\\n\\nThe term \\"static site generators\\" (SSG) refers to tools that automatically build static webpages for you, populating a chosen template with your custom content or data. The code generation is transparent to you, making it possible for even non-developers to setup custom static websites quickly. \\n\\nStatic site generation is a growing trend for fast, flexible website creation. But it requires an external service to handle hosting and build/deploy workflows. **This is where Azure Static Web Apps comes in!** Check out the [SWA documentation](https://docs.microsoft.com/en-us/azure/static-web-apps/publish-gatsby) for tutorials featuring popular SSGs like Hugo, Jekyll and Gatsby. We\'ll explore some other examples later this week.\\n\\n## Hello, Astro!\\n\\nToday\'s post will however focus on [Astro](https://astro.build/blog/introducing-astro), one of the [rising stars of JavaScript](https://risingstars.js.org/2021/en#section-ssg) in the _Static Sites_ category. Astro is a static site builder that works _like an SSG_ but with some [novel features](https://astro.build/blog/introducing-astro) that set it apart. \\n * Bring your own framework (React, Vue, Svelte, web components)\\n * Compose your website using that framework\'s UI components\\n * Astro now renders a fully-static (all HTML, no JavaScript) website\\n\\nAstro emphasizes **fast performance** with **less JavaScript** - and takes a [partial hydration](https://www.patterns.dev/posts/progressive-hydration/) approach that allows it to load the minimal required amount of JavaScript, if and when absolutely necessary. Here\'s a quick overview of Astro.\\n\\n<iframe  width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" allowfullscreen src=\\"https://www.youtube.com/embed/dsTXcSeAZq8\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" ></iframe>\\n\\n\\n## Astro + SWA\\n\\nIn **[today\'s tutorial](https://dev.to/azure/building-applications-with-astro-build-azure-static-web-apps-cli-a20)**, we walk through the steps required to:\\n * create an astro-powered blog (using [this template](tttps://github.com/glaucia86/astro-swa-demo))\\n * test it locally using the Azure Static Web Apps CLI (`swa`)\\n * deploy it using the [Visual Studio Code Extenstion for SWA](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) \\n\\nThe end result will look like this. \\n![Personal Blog with Astro](../static/img/series/08-astro.jpeg)\\n\\nHere are the key links to know:\\n *  Visit **[this page](https://dev.to/azure/building-applications-with-astro-build-azure-static-web-apps-cli-a20)** for the step-by-step tutorial.\\n * Check **[this repository](tttps://github.com/glaucia86/astro-swa-demo)** for the source code (demo app template)\\n * **[See this site](https://yellow-grass-008f2c710.azurestaticapps.net/)** for the deployed version of the app.\\n\\nThen check back tomorrow for a new usage example and tutorial - this time, with a focus on React - as we continue to explore Azure Static Web Apps in action!\\n\\n\\n## Exercise\\n\\nHere are a couple of options to try, to get more hands-on experience:\\n\\n* Clone the [template project](https://github.com/glaucia86/astro-swa-demo.git) and follow the [tutorial](https://dev.to/azure/building-applications-with-astro-build-azure-static-web-apps-cli-a20) to build and deploy **your** personal blog.\\n* Visit the [Astro Themes](https://astro.build/themes/) page and try using a different starter project, then deploying it to Azure Static Web Apps.\\n\\n\\n## Resources\\n\\nCheck out these other tutorials using more traditional static site generators:\\n * Publish a [Gatsby site](https://docs.microsoft.com/en-us/azure/static-web-apps/publish-gatsby) to Azure Static Web Apps\\n * Publish a [Hugo site](https://docs.microsoft.com/en-us/azure/static-web-apps/publish-hugo) to Azure Static Web Apps\\n * Publish a [Jekyll site](https://docs.microsoft.com/en-us/azure/static-web-apps/publish-jekyll) to Azure Static Web Apps\\n * Publish a [VuePress site](https://docs.microsoft.com/en-us/azure/static-web-apps/publish-vuepress) to Azure Static Web Apps"},{"id":"deploying-swa","metadata":{"permalink":"/blog/deploying-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-08.md","source":"@site/blog/2021-05-08.md","title":"#07: Deploying SWA","description":"Welcome to Week 1, Day 7 of #30DaysOfSWA!!","date":"2021-05-08T00:00:00.000Z","formattedDate":"May 8, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"core-concepts","permalink":"/blog/tags/core-concepts"}],"readingTime":2.61,"truncated":false,"authors":[{"name":"Reshmi Sriram","title":"PM, Static Web Apps @Microsoft","url":"https://twitter.com/reshsriram","imageURL":"https://github.com/Reshmi-Sriram.png\\\\","key":"reshmi"}],"frontMatter":{"slug":"deploying-swa","title":"#07: Deploying SWA","authors":["reshmi"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#08: Build A Blog - with Astro","permalink":"/blog/build-with-astro"},"nextItem":{"title":"#06: Previewing SWA","permalink":"/blog/previewing-swa"}},"content":"Welcome to `Week 1, Day 7` of **#30DaysOfSWA**!! \\n\\nYou made it this far! Give yourself a pat on your back already! \ud83d\ude0a  \\n\\nBy now, we have learnt what Static Web Apps is, and how to build, add APIs and configure the application. We\u2019ve also deployed a couple of fun apps as a tribute to Star Wars! But we\u2019ve so far explored deploying using the Github Actions path. \\n * What if we want some other CI/CD tool? \\n * What if our project resides safely in an Azure DevOps repository? \\n * What if we don\u2019t want a CI/CD solution AT ALL? \\n \\nFear not! Because today we\u2019re gonna explore other ways of deploying a Static Web App on Azure \ud83d\ude0a \\n\\n\\n## What We\'ll Cover\\n * Deploy With Azure DevOps  \\n * Deploy From GitLab and BitBucket \\n * Deploy Using ARM Template \\n * **Exercise**: Explore the\u202f[ARM Tools VS Code Extension](https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/quickstart-create-templates-use-visual-studio-code?tabs=CLI)\\n\\n![](../static/img/series/07-banner.png)\\n\\n \\n## Deploy with Azure DevOps \\n\\nDeploying using Azure pipelines CI/CD has never been easier! \\n\\nStatic Web Apps supports projects which are stored in Azure repos and helps in creating a smooth CI/CD pipeline to automatically trigger the changes on every commit to the main branch. What more? With the latest changes checked in for Azure DevOps, we can now [set up the azure pipeline via Portal with a single click](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-portal?tabs=vanilla-javascript&pivots=azure-devops)! Here\u2019s a quick video demonstrating how to use DevOps as a pipeline, as well as touching on the numerous other enhancements brought in off-late, such as stable staging environments, password protected websites, build and deploy split, and lots more! \ud83d\ude0a \\n\\n<iframe  width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://www.youtube.com/embed/4JkfeZp7aDk\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\\n \\n## Deploy via GitLab and BitBucket \\n\\nBut what if we wanted a third-party Provider? Static Web Apps as of today [officially supports](https://azure.microsoft.com/en-us/updates/public-preview-static-web-apps-now-supports-gitlab-and-bitbucket-for-cicd/) CI/CD pipelines from GitLab and BitBucket! We just have to follow a few simple steps as discussed in the documentation for both [GitLab](https://docs.microsoft.com/en-us/azure/static-web-apps/gitlab?tabs=vanilla-javascript) and [BitBucket](https://docs.microsoft.com/en-us/azure/static-web-apps/bitbucket?tabs=vanilla-javascript), and voila! We\u2019ll have a beautifully configured pipeline which takes care of the automatic trigger on commits for us. Isn\u2019t this beautiful? \ud83d\ude0a \\n\\n \\n## Deploy using ARM Template \\n\\nFor the CLI lovers out there, we can also deploy in Static Web Apps [using ARM Templates](https://docs.microsoft.com/en-us/azure/static-web-apps/publish-azure-resource-manager?tabs=azure-cli)! The ARM - or [Azure Resource Manager Template](https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/overview) - is used in preparing the workflow template. On deploying the ARM Template to Azure Static Web Apps, it triggers the Github Actions, which further takes care of our CI/CD needs. Do check out the exercise later in the blog for a quick hands-on using ARM Templates!  \\n\\n\\nBut what about .. **deploying without a CI/CD??** \\n\\nSuppose we want a one-time deployment solution? Or we don\u2019t want to depend on a CI/CD tool at all! No worries! We have you covered! Wonder how that is supported? Stay tuned to the #30DaysOfSWA series and **discover the new upcoming features** to enable this! \ud83d\ude09 <3<3  \\n\\n\\n## Resources\\n\\nNow that we\u2019ve explored the alternatives we have, let\u2019s go have some fun with it!! Here are a few quickstarts you can try out!\\n\\n1. [Deploy using BitBucket](https://aka.ms/swabitbucketsupport) \\n2. [Deploy using GitLab](https://aka.ms/swagitlabsupport) \\n3. [Deploy using Azure DevOps and Portal Quickstart](https://aka.ms/static-web-apps-publish-devops)  \\n4. [Use an ARM template quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/publish-azure-resource-manager?tabs=azure-cli)"},{"id":"previewing-swa","metadata":{"permalink":"/blog/previewing-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-07.md","source":"@site/blog/2021-05-07.md","title":"#06: Previewing SWA","description":"Welcome to Week 1, Day 6 of #30DaysOfSWA!!","date":"2021-05-07T00:00:00.000Z","formattedDate":"May 7, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"core-concepts","permalink":"/blog/tags/core-concepts"}],"readingTime":6.425,"truncated":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Michail Shaposhnikov","title":"Software Engineer @Microsoft","url":"https://github.com/mishapos","imageURL":"https://github.com/mishapos.png","key":"michail"}],"frontMatter":{"slug":"previewing-swa","title":"#06: Previewing SWA","authors":["nitya","michail"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#07: Deploying SWA","permalink":"/blog/deploying-swa"},"nextItem":{"title":"#05: Securing SWA","permalink":"/blog/securing-swa"}},"content":"Welcome to `Week 1, Day 6` of **#30DaysOfSWA**!! \\n\\nWe\'re almost at the end of week 1!! \ud83c\udf89 \\n\\nSo far, we\'ve learned how we can use the _static assets hosting_ (Azure Static Web Apps) and _serverless API_ (Azure Functions) capabilities to build and deploy a web application in a scalable and cost-effective way. And we learned to _configure_ and _secure_ our Static Web App to suit our needs. So what else do we need to talk about?\\n\\n**Deployment** options? Let\'s do it!! We\'ve talked about the default experience so far: deploy from a _production_ branch, using _GitHub_ Actions for CI/CD. But how do we handle **previewing** the Static Web App before production deploys? Let\'s talk about previewing SWA in pull requests, on non-production branches, and in pre-configured named environments that make our staging workflows more productive.\\n\\n\\n## What We\'ll Cover\\n * What types of deployment does SWA support?\\n * _Previewing_: in Pull Requests\\n * _Previewing_: in Non-Production Branches\\n * _Previewing_: in Named Environments\\n * _Deploying_: to Custom Domains\\n * **Exercise:** [Review PR using SWA Preview Capability](https://docs.microsoft.com/en-us/azure/static-web-apps/review-publish-pull-requests)\\n\\n![](../static/img/series/06-banner.png)\\n\\n## Deployment Types\\n\\nWhen we think about deployment, we are typically thinking of two kinds of environments: _production_ which serve as the primary endpoint for real world use, and _staging_  that can be used for internal testing, early validation of preview releases.\\n\\nAzure Static Web Apps has built-in support for four types of environments:\\n\\n * _Production_: This is the real world deployment endpoint that is **indexed by search engines**, and associated with the custom domain (if configured).\\n * _Pull Request (PR)_: This is a **temporary** environment setup for a Pull Request, and torn down when that PR is closed.\\n * _Branch_: This is a environment you can set up for non-production branches, at a **stable** URL for the lifetime of the branch.\\n * _Named_: The above environments have URLs that reflect their PR (number) or branch (name). You can also configure a **stable** preview environment with a fixed name, associated with some deployment context (e.g., an interim release)\\n\\nProduction deploys have URLs like `<DEFAULT-HOSTNAME>-<NUMBER>.azurestaticapps.net` where the `DEFAULT-HOSTNAME` is unique for each application. \\n\\nWith _preview_ environments, the URL looks like: `<DEFAULT_HOSTNAME>-<BRANCH_OR_ENVIRONMENT_NAME>.<LOCATION>.azurestaticapps.net` where the `LOCATION` reflects the deployment region, and the `BRANCH_OR_ENVIRONMENT_NAME` can also take the form of a branch name, a named environment, or a number in the case of pull requests.\\n\\nLet\'s take a brief look at each of these.\\n\\n\\n## Pull Requests\\n\\nCurrently Pull Request _preview environments_ are available for projects hosted in GitHub, and configured to use GitHub Actions by Azure Static Web Apps:\\n  * Every PR to a _watched branch_ gets a dedicated but **temporary** pre-production staging environment that is torn down when the PR is closed.\\n  * Use it to validate changes, perform sanity checks, etc.\\n  * The environment is automatically rebuilt and deployed if new commits are made to the branch associated with an active PR.\\n  * The staged environment is _publicly visible_ event if your GitHub repo is private - though the URL is not easily discoverable (i.e., not indexed by search engines) by default.\\n\\nLearn how to [preview Pull Requests in Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/review-publish-pull-requests).\\n\\n\\n## Branches\\n\\nPreview environments for branches will have **stable** URLs. Configure them in the relevant _GitHub Actions_ or _Azure Pipelines_ workflow files as [shown in this example](https://docs.microsoft.com/en-us/azure/static-web-apps/branch-environments?tabs=github-actions#example). \\n\\nFor example, in a GitHub Actions context, this involves two steps:\\n * set the `production_branch` property to the branch you want to use as the source for that production deployment.\\n * list all other branches that you want preview environments for under `trigger` (Azure Pipelines) or `push: branches` (in GitHub Actions).\\n\\nYou can use a wildcare (`**` for GitHub Actions, `*` for Azure Pipelines) if you want to track _all_ branches for preview environment support. \\n\\nHere\'s an example GitHub Actions config file - the **production** environment is built from the _main_ branch, and separate **preview** environments are built for the other listed branches (_dev_ and _staging_).\\n\\nLearn how to [create branch preview environments in Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/branch-environments?tabs=github-actions).\\n \\n```\\nname: Azure Static Web Apps CI/CD\\n\\non:\\n  push:\\n    branches:\\n      - main\\n      - dev\\n      - staging\\n  pull_request:\\n    types: [opened, synchronize, reopened, closed]\\n    branches:\\n      - main\\n\\njobs:\\n  build_and_deploy_job:\\n    ...\\n    name: Build and Deploy Job\\n    steps:\\n      - uses: actions/checkout@v2\\n        with:\\n          submodules: true\\n      - name: Build And Deploy\\n        id: builddeploy\\n        uses: Azure/static-web-apps-deploy@v1\\n        with:\\n          ...\\n          production_branch: \\"main\\"\\n```\\n\\n\\n## Named Envs\\n\\nSometimes, you want to have a non-production preview environment that is at _stable_ URL (not tied to a specific PR number or branch name), and that gets rebuilt on commits to _all tracked branches_ in the configuration file. \\n\\nJust like with branches, this requires a manual change to your default configuration file (GitHub Actions or Azure Pipelines) as [shown in this example](https://docs.microsoft.com/en-us/azure/static-web-apps/named-environments?tabs=github-actions#configuration).\\n\\nIn the GitHub Actions case, the steps are:\\n * Set the `deployment_environment` property (in the relevant build job) to be the **name** you want to use for this preview environment\\n * List the branches you want associated with this named environment under `push: branches` - commits to those will result in rebuild/deploy to this environment.\\n\\nHere\'s an example GitHub Actions configuration file - this sets up a named environment called **release** which gets updated when changes are made to **any** branch (reflected by the `**` wildcard), and deployed to a site with a URL like `<DEFAULT_HOST_NAME>-release.<LOCATION>.azurestaticapps.net`.\\n\\nLearn about [named preview environments in Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/named-environments?tabs=github-actions)\\n\\n```\\nname: Azure Static Web Apps CI/CD\\n\\non:\\n  push:\\n    branches:\\n      - \\"**\\"\\n  pull_request:\\n    types: [opened, synchronize, reopened, closed]\\n    branches:\\n      - main\\n\\njobs:\\n  build_and_deploy_job:\\n    ...\\n    name: Build and Deploy Job\\n    steps:\\n      - uses: actions/checkout@v2\\n        with:\\n          submodules: true\\n      - name: Build And Deploy\\n        id: builddeploy\\n        uses: Azure/static-web-apps-deploy@v1\\n        with:\\n          ...\\n          deployment_environment: \\"release\\"\\n```\\n\\n\\n## Custom Domains\\n\\nYou may have noticed that default deployment URLs - in the form `XXX.azurestaticapps.net` for production environments or `XXX.<LOCATION>.azurestaticapps.net` for preview environments - are not exactly user friendly for use and recall. \\n\\nAdding a custom domain helps. Azure Static Apps makes that easy with options to also configure **subdomains** and an **apex domain**! Here, given a domain like `www.azure.com`, `azure.com` is the apex domain and `www` is the relevant subdomain.\\n\\nSo how do you configure these? You have two options:\\n* Use an **external DNS Provider** (if your domain registrar supports it)\\n* Use **Azure DNS** (to manage your DNS domain, even if purchased elsewhere)\\n\\nTo keep this post short, we won\'t go into details for each of these options. Instead check out these links based on the direction you want to go in:\\n * Setup Apex Domain - with [Azure DNS](https://docs.microsoft.com/en-us/azure/static-web-apps/apex-domain-azure-dns) | with [External Provider](https://docs.microsoft.com/en-us/azure/static-web-apps/apex-domain-external)\\n * Setup Subdomain - with [Azure DNS](https://docs.microsoft.com/en-us/azure/static-web-apps/custom-domain-azure-dns) | with [External Provider](https://docs.microsoft.com/en-us/azure/static-web-apps/custom-domain-external)\\n\\n---\\n\\n## How-Tos: Watch It!\\n\\nPrefer a Video Walkthrough to understand the process? We have you covered with the [Azure Tips And Tricks: Static Web Apps](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/) series. Check out this video to understand how you can setup a custom domain for your Static Web App!\\n\\n<iframe   width=\\"560\\" height=\\"315\\" frameborder=\\"0\\"  src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-set-up-a-custom-domain-name-in-azure-static-web-apps-10-of-16--azure-tips-and-tricks-static-w\\"></iframe>\\n\\n---\\n\\n## Exercise: Try it!\\n\\n**Pull Requests** are critical to having a productive open source or multi-contributor project, so it\'s important to know how Azure Static Apps works in setting up **pre-production** environments for validating the changes proposed in a pull-request, before merging it for production deployment.\\n\\nGet hands-on experience with the process by completing [this tutorial](https://docs.microsoft.com/en-us/azure/static-web-apps/review-publish-pull-requests) on an existing Azure Static Web Apps project. \\n\\n_At present, the staged pre-production environment for Pull Requests is available only for GitHub Actions deployments - so make sure you pick a GitHub-hosted SWA project that already had the default workflows set up_.\\n\\n---\\n\\n## Useful Resources\\n\\n1. [Preview environments in Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/preview-environments)\\n2. [Pull-Request Preview Environments](https://docs.microsoft.com/en-us/azure/static-web-apps/review-publish-pull-requests)\\n3. [Branch Preview Environments](https://docs.microsoft.com/en-us/azure/static-web-apps/branch-environments)\\n4. [Named Preview Environments](https://docs.microsoft.com/en-us/azure/static-web-apps/named-environments)\\n5. Video Series: [Azure Tips And Tricks - Static Web Apps](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/)\\n6. [About Custom Domains](https://docs.microsoft.com/en-us/azure/static-web-apps/custom-domain)"},{"id":"securing-swa","metadata":{"permalink":"/blog/securing-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-06.md","source":"@site/blog/2021-05-06.md","title":"#05: Securing SWA","description":"Welcome to Week 1, Day 5 of #30DaysOfSWA!!","date":"2021-05-06T00:00:00.000Z","formattedDate":"May 6, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"core-concepts","permalink":"/blog/tags/core-concepts"}],"readingTime":5.575,"truncated":false,"authors":[{"name":"Mitali Karmarkar","title":"Software Engineer @Microsoft","url":"https://twitter.com/KarmarkarMitali","imageURL":"https://pbs.twimg.com/profile_images/1292880690237718529/yFXe2D99_400x400.jpg","key":"mitali"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"securing-swa","title":"#05: Securing SWA","authors":["mitali","nitya"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#06: Previewing SWA","permalink":"/blog/previewing-swa"},"nextItem":{"title":"#04: Configuring SWA","permalink":"/blog/configuring-swa"}},"content":"Welcome to `Week 1, Day 5` of **#30DaysOfSWA**!! \\n\\nSo far, we\'ve learnt to build/deploy a basic web app, add a serverless API endpoint and customize the configuration settings for both application behaviors and build workflows. But we forgot one thing - the **user**! To create _differentiated_ experiences for users, we need ways to **identify them** and **understand their role** in the application context. We can then use that information to **manage user access to application features** (role-based authorization) as well as **application access to user information** (once authenticated).\\n\\nThankfully, Azure Static Web Apps makes this fairly painless. Let\'s see how.\\n\\n\\n## What We\'ll Cover\\n * How do we secure a SWA?\\n * Managed authentication\\n * Custom authentication\\n * Managing user roles\\n * Role-based authorization\\n * Accessing user information\\n\\n![](../static/img/series/05-banner.png)\\n\\n\\n## Securing SWA\\n\\nWhat does it mean to _secure_ a Static Web App? It\'s three things:\\n * **Knowing User Identity** - Having a way to determine the identity of the user using an authentication service or provider.\\n * **Knowing User Roles** - Understanding what persona the user is taking on when (using the application), and customizing the experience accordingly.\\n * **Managing User Access** - Making sure the authenticaton information is seamlessly accessible to all SWA components, allowing them to enforce rules that allow only authorized users or roles to access resources.\\n\\nLet\'s dive into the three concepts that tackle these needs: **Authentication**, **Role Assignment** and **Role-Based Authorization**.\\n\\n## Managed Auth\\n\\nAzure Static Web Apps comes with a default **streamlined authentication experience** that supports:\\n * _pre-configured providers_: Twitter, GitHub, Azure Active Directory\\n * _pre-assigned roles_: anonymous (guest) or authenticated (on login)\\n * _customizable rules_: defined for routes, in `staticwebapps.config.json`\\n\\nAll pre-configured providers are active by default, with their own pre-defined API endpoints for [Login](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations#login), and a shared API endpoint for [Logout](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations#logout). \\n * Want to block a specific pre-configured provider? Just [add a blocking rule](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations#block-an-authentication-provider) to their login route to ensure no user is allowed access to it.\\n * Want to send users to custom pages after successful or failed login attempts? Use [query parameters and route rules](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations#post-login-redirect) to make this work.\\n\\nThis is the default _managed authentication_ experience. \\n\\n## Custom Auth \\n\\nBut what if you want more flexibility with the registration process (used by a pre-configured provider) or want to add a new one (custom provider)?\\nThis is where _custom authentication_ options come in, allowing you to override the defaults.\\n\\nYou can [configure one or more custom providers](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=aad#configure-a-custom-identity-provider) for this purpose. Azure Static Web Apps has **[built-in support](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=apple#configure-a-custom-identity-provider) for custom authentication using: _Apple, Facebook, Google, Twitter, GitHub - and AAD_!** You can also configure custom providers that support [OpenID Connect](https://openid.net/connect/) standard. \\n\\nBy configuring at least one custom provider, you are effectively disabling pre-configured provider options. To configure custom providers, add config information to the `auth` section of the `staticwebapps.config.json` file. This is also a good place to use _Application Settings_ (environment variables) to store potentially sensitive configuration data in a privacy-preserving way.\\n\\nAzure Static Web Apps makes custom registrations easy by providing standard route patterns for [_Login_, _Logout_ and _User Profile_](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=apple#authentication-callbacks) requests, as well as [redirect URLs](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=apple#authentication-callbacks) for authentication callbacks (from the custom provider) on login/logout.\\n\\n## User Roles\\n\\nThere are three key concepts you need to know in this context:\\n * Every Static Web Apps user has one or more roles assigned to them.\\n * There are 2 built-in roles (\\"anonymous\\" and \\"authenticated\\")\\n * Define custom roles & assign users **[by invitation](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations#add-a-user-to-a-role)** or **[by-function](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=function#add-a-user-to-a-role)**.\\n\\nLet\'s review these quickly. \\n\\n * All users accessing a Static Web App are in an _anonymous_ role (guest) until authenticated by a pre-configured or custom provider.\\n * Once authenticated, they have an _authenticated_ role but can now be _assigned custom roles_ by invitation (proactive) or by function (reactive)\\n * **Proactive invitations** can be configured and sent from the Azure Portal, using provider-specific email addresses for the user. Users now click on the invite link to login with that custom role assigned automatically.\\n * **Reactive functions** defer assignment to post-login, using an Azure Function that dynamically returns an assigned role (or roles) to the user on being given the authenticated user details.\\n\\nThe latter approach offers more flexibility, allowing you to use the function handler to invoke another service (like [Microsoft Graph](https://developer.microsoft.com/graph)) to make the role-assignment decision for you. Read [**Role Management**](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=function#role-management) for more details - including steps to update role assignments or remove users from a role.\\n\\n\\n## Role-Based Auth\\n\\nOnce the user has been assigned a role, _managing user access_ based on that assignment becomes easy using the built-in support for [routing rules](https://docs.microsoft.com/en-us/azure/static-web-apps/configuration#routes) based on the **allowedRoles** property attached to each `route`. For example, the following configuration setting (in `staticwebapps.config.json`) would restrict access to all routes that start with `/profile*` to _only authenticated users_.\\n)\\n\\n```\\n{\\n  \\"route\\": \\"/profile*\\",\\n  \\"allowedRoles\\": [\\"authenticated\\"]\\n}\\n```\\n\\nRead more about [securing routes with rules](https://docs.microsoft.com/en-us/azure/static-web-apps/configuration#securing-routes-with-roles) to understand various usage scenarios and configuration settings to enforce them.\\n\\n## Access User Info\\n\\nOne of the benefits of Azure Static Web Apps\' seamless integration of application and API capabilities is that [authenticated user information can be accessed transparently](https://docs.microsoft.com/en-us/azure/static-web-apps/user-information?tabs=javascript) in two ways:\\n * Using a [direct access endpoint](https://docs.microsoft.com/en-us/azure/static-web-apps/user-information?tabs=javascript#direct-access-endpoint) at `/.auth/me` that is automatically provisioned with the user\'s information when authenticated.\\n * Using [API functions](https://docs.microsoft.com/en-us/azure/static-web-apps/user-information?tabs=javascript#api-functions) with a `fetch` call to the `/api/xxx` endpoint, where `xxx` is a named function you implement to return user information. \\n\\n\\n---\\n\\n## How-Tos: Watch It!\\n\\nPrefer a Video Walkthrough to understand the process? We have you covered with the [Azure Tips And Tricks: Static Web Apps](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/) series. Check out the following videos:\\n\\n<iframe  width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-integrate-authentication-in-azure-static-web-apps-8-of-16--azure-tips-and-tricks-static-web-a\\"></iframe>\\n\\n<iframe  width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-configure-authorization-in-azure-static-web-apps-9-of-16--azure-tips-and-tricks-static-web-ap\\"></iframe>\\n\\n---\\n\\n## Exercise: Try it!\\n\\nOne popular feature that modern web apps often support is the ability to assign a custom role to an authenticated user (based on some identifiable context) and then regulate their access to various routes or features in the application based on that assigned role. **How can we make that happen in Static Web Apps?**\\n\\nThere\'s a [**tutorial**](https://docs.microsoft.com/en-us/azure/static-web-apps/assign-roles-microsoft-graph) that teaches you how! \\n * Authenticate the user using the managed [Azure Active Directory](https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis) API endpoint.\\n * Query [Microsoft Graph](https://developer.microsoft.com/graph) to determine their Active Directory group membership.\\n * Use that membership to assign them a custom role.\\n\\n**Challenge Yourself!** \\n\\nUpdate the application behavior in the `staticwebapp.config.json` file to restrict user access to specific routes by specifying `allowedRoles` for those routes. Test what happens when the custom role above is added, and then removed, from the collection of allowedRoles.\\n\\n---\\n\\n## Useful Resources\\n\\n1. [Authentication and Authorization in SWA](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations)\\n2. [Accessing authenticated user information in SWA](https://docs.microsoft.com/en-us/azure/static-web-apps/user-information?tabs=javascript)\\n3. [Implement custom authentication in SWA](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=aad)\\n4. Tutorial: [Assign custom roles using Microsoft Graph and AAD](https://docs.microsoft.com/en-us/azure/static-web-apps/assign-roles-microsoft-graph)\\n5. Video Series: [Azure Tips And Tricks - Static Web Apps](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/)"},{"id":"configuring-swa","metadata":{"permalink":"/blog/configuring-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-05.md","source":"@site/blog/2021-05-05.md","title":"#04: Configuring SWA","description":"Welcome to Week 1, Day 4 of #30DaysOfSWA!!","date":"2021-05-05T00:00:00.000Z","formattedDate":"May 5, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"core-concepts","permalink":"/blog/tags/core-concepts"}],"readingTime":5.395,"truncated":false,"authors":[{"name":"Joseph Lin","title":"Software Engineer @Microsoft","url":"https://github.com/joslinmicrosoft","imageURL":"https://github.com/joslinmicrosoft.png","key":"joseph"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"configuring-swa","title":"#04: Configuring SWA","authors":["joseph","nitya"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#05: Securing SWA","permalink":"/blog/securing-swa"},"nextItem":{"title":"#03: API-Enabling SWA","permalink":"/blog/api-enabling-swa"}},"content":"Welcome to `Week 1, Day 4` of **#30DaysOfSWA**!! \\n\\nIn the past two days we\'ve seen how the Azure Static Web Apps services sets up default CI/CD actions (to automate build/deploy workflows) and transparently configures application to access the API with minimal input from us during setup. But what if we want to _customize_ the build process or application behavior? That\'s where knowing SWA _configuration options_ can help.\\n\\n\\n## What We\'ll Cover\\n * Configuration: Concepts & Files\\n * Customize: Application Behavior\\n * Customize: Build Process\\n * Customize: Environment Settings\\n * **Exercise:** Explore an open source app to see these in action!\\n * **Resource(s):** Links for deeper-dives into the topic\\n\\n![](../static/img/series/04-banner.png)\\n\\n\\n## Concepts & Files\\n\\nWhen we think of configuring the Static Web App, we have three potential targets we can customize:\\n * **Application**: Use the `staticwebapp.config.json` file (located in the folder specified for `app_location`) to define rules and properties that customize application behaviors like routing, authentication, networking and more. \\n * **Build**: Static Web Apps automates your build/deploy workflow using GitHub Actions or Azure Pipelines, configurable via the relevant YAML files. For example, this would be the `.github/workflows/azure-static-web-apps-xxx.yml` file in your repo, for GitHub Actions.\\n * **Environment:** Sometimes configuration values may only be known at runtime - e.g., database connection strings. By using environment variables, you can update the _values_ at runtime without having to change the application code that uses them. Environment variables can be set in the Azure Portal (for production) or in _local settings files_ (for development.)\\n\\nLet\'s take a quick look at what each of these provides, along with resource links for deeper dives that you can explore on your own. Check out the [example scenarios](https://docs.microsoft.com/azure/static-web-apps/configuration-overview#example-scenarios) to get a better understanding of which file (or concept) you need to focus on, for specific scenarios.\\n\\n## Config: Application\\n\\nApplication behavior is configured using the _staticwebapp.config.json_ file located in the folder defined by `app_location`. Here are a _subset_ of the properties and their purpose:\\n\\n * [**\\"routes\\"**](https://docs.microsoft.com/azure/static-web-apps/configuration#routes) - are an array of \\"route\\" objects that can each be associated with access rules (\\"allowedRoles\\"), actions (\\"redirect\\", \\"rewrite\\") - and request (\\"methods\\") and response (\\"headers\\",\\"statusCode\\") properties.\\n * [**\\"navigationFallback\\"**](https://docs.microsoft.com/azure/static-web-apps/configuration#fallback-routes) supports applications that rely on client-side routing by providing a server-side fallback route which serves the required page, with filters to control usage.\\n * [**\\"responseOverrides\\"**](https://docs.microsoft.com/azure/static-web-apps/configuration#response-overrides) allows you to return a custom response instead of default HTTP error codes, for more user-friendly experiences.\\n * [**\\"platform\\"**](https://docs.microsoft.com/azure/static-web-apps/configuration#platform) sets platform-specific configurations like _apiRuntime_ for API language runtime version.\\n\\n There are also configuration properties for authentication, networking, global headers, custom MIME types and more. Check out the [documentation](https://docs.microsoft.com/azure/static-web-apps/configuration#file-location) for the complete list and scan this **example** [staticwebapp.config.json](https://docs.microsoft.com/azure/static-web-apps/configuration#example-configuration-file) to understand how these are defined.\\n\\n```json\\n{\\n  \\"routes\\": [\\n    {\\n      \\"route\\": \\"/profile*\\",\\n      \\"allowedRoles\\": [\\"authenticated\\"]\\n    },\\n    {\\n      \\"route\\": \\"/admin/index.html\\",\\n      \\"allowedRoles\\": [\\"administrator\\"]\\n    },\\n    {\\n      \\"route\\": \\"/images/*\\",\\n      \\"headers\\": {\\n        \\"cache-control\\": \\"must-revalidate, max-age=15770000\\"\\n      }\\n    },\\n    {\\n      \\"route\\": \\"/api/*\\",\\n      \\"methods\\": [\\"GET\\"],\\n      \\"allowedRoles\\": [\\"registeredusers\\"]\\n    },\\n    {\\n      \\"route\\": \\"/api/*\\",\\n      \\"methods\\": [\\"PUT\\", \\"POST\\", \\"PATCH\\", \\"DELETE\\"],\\n      \\"allowedRoles\\": [\\"administrator\\"]\\n    },\\n    {\\n      \\"route\\": \\"/api/*\\",\\n      \\"allowedRoles\\": [\\"authenticated\\"]\\n    },\\n    {\\n      \\"route\\": \\"/customers/contoso*\\",\\n      \\"allowedRoles\\": [\\"administrator\\", \\"customers_contoso\\"]\\n    },\\n    {\\n      \\"route\\": \\"/login\\",\\n      \\"rewrite\\": \\"/.auth/login/github\\"\\n    },\\n    {\\n      \\"route\\": \\"/.auth/login/twitter\\",\\n      \\"statusCode\\": 404\\n    },\\n    {\\n      \\"route\\": \\"/logout\\",\\n      \\"redirect\\": \\"/.auth/logout\\"\\n    },\\n    {\\n      \\"route\\": \\"/calendar*\\",\\n      \\"rewrite\\": \\"/calendar.html\\"\\n    },\\n    {\\n      \\"route\\": \\"/specials\\",\\n      \\"redirect\\": \\"/deals\\",\\n      \\"statusCode\\": 301\\n    }\\n  ],\\n  \\"navigationFallback\\": {\\n    \\"rewrite\\": \\"index.html\\",\\n    \\"exclude\\": [\\"/images/*.{png,jpg,gif}\\", \\"/css/*\\"]\\n  },\\n  \\"responseOverrides\\": {\\n    \\"400\\": {\\n      \\"rewrite\\": \\"/invalid-invitation-error.html\\"\\n    },\\n    \\"401\\": {\\n      \\"redirect\\": \\"/login\\",\\n      \\"statusCode\\": 302\\n    },\\n    \\"403\\": {\\n      \\"rewrite\\": \\"/custom-forbidden-page.html\\"\\n    },\\n    \\"404\\": {\\n      \\"rewrite\\": \\"/404.html\\"\\n    }\\n  },\\n  \\"globalHeaders\\": {\\n    \\"content-security-policy\\": \\"default-src https: \'unsafe-eval\' \'unsafe-inline\'; object-src \'none\'\\"\\n  },\\n  \\"mimeTypes\\": {\\n    \\".json\\": \\"text/json\\"\\n  }\\n}\\n```\\n\\n\\n\\n\\n## Config: Build\\n\\nAzure Static Web Apps build workflows are powered either by GitHub Actions (in a file named something like `.github/workflows/azure-static-web-apps-xxx.yml`) or by Azure Pipelines (using the `azure-pipelines.yml` file). \\n\\nThe main settings you need to be familiar with are:\\n * `app_location` - folder for application source code\\n * `api_location` - folder with API functions source code\\n * `output_location` - where are build files generated\\n * `app_build_command` - custom app build command (for Node.js apps)\\n * `api_build_command` - custom api build command (for Node.js apps)\\n * `skip_app_build` - flag to skip app build step (if true)\\n * `skip_api_build` - flag to skip api build step (if true)\\n * `build_timeout_in_minutes` - defaults to 15 (customize to extend)\\n\\nRead [**this document**](https://docs.microsoft.com/azure/static-web-apps/build-configuration?tabs=azure-devops#environment-variables) to learn how each of those properties can be customized and used effectively.\\n\\n\\n## Config: Environment\\n\\nYour application behavior configuration values may change based on the runtime context. By setting values in _environment variables_, you can decouple definition of values from their usage within application code. We refer to these environment variables as [**application settings**](https://docs.microsoft.com/azure/static-web-apps/application-settings) which are copied to both staging and production environments. \\n\\nBut where are they _defined?_ That depends on the development stage:\\n\\n * **[Local Development:](https://docs.microsoft.com/azure/static-web-apps/application-settings#configure-api-application-settings-for-local-development)** When developing your app, you can use a local settings file that is not tracked by GitHub so sensitive information is not leaked. **Azure Functions** uses the `api/local.settings.json` file to store relevant app settings - and watch out for a special 2-part series of posts in Week 3 where we cover the local settings file used by the [**Static Web Apps CLI**](https://github.com/Azure/static-web-apps-cli) for a simpler, unified local development experience.\\n * [**Staging/Production:**](https://docs.microsoft.com/azure/static-web-apps/application-settings#configure-application-settings) You can define and configure these application settings in the [Azure Portal](https://portal.azure.com/) via the browser, or by using the [Azure CLI](https://docs.microsoft.com/cli/azure/) (see the [`az staticwebapp appsettings`](https://docs.microsoft.com/cli/azure/staticwebapp/appsettings?view=azure-cli-latest) documentation), to create and manage your application settings. These will be encrypted, and copied to staging and production environments.\\n\\nLearn more about how you can configure application settings in [the documentation](https://docs.microsoft.com/azure/static-web-apps/application-settings#configure-application-settings).\\n\\n## How-Tos: Watch It!\\n\\nWant to see how application behavior configuration in action? Check out these two videos from the [Azure Static Web Apps: Tips & Tricks](https://docs.microsoft.com/shows/azure-tips-and-tricks-static-web-apps/) series.\\n\\n<iframe width=\\"560\\" height=\\"315\\" frameborder=\\"0\\"  src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-configure-routing-in-azure-static-web-apps-6-of-16--azure-tips-and-tricks-static-web-apps\\"></iframe>\\n\\n<iframe width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-configure-authorization-in-azure-static-web-apps-9-of-16--azure-tips-and-tricks-static-web-ap\\" ></iframe>\\n\\n\\n## Exercise: Explore It!\\n\\nThe [SWA Bank](https://github.com/sinedied/swa-bank) is a Static Web App application developed as a solution for one of the projects in the [Web Dev For Beginners](https://github.com/microsoft/Web-Dev-For-Beginners) curriculum. \\n\\nIt was recently updated to reflect best practices. Explore the configuration files in the project - and see if you understand how they customize the application behavior and build process. **Then revisit it in week 3 when we discuss developer tools** to understand how local settings are configured and used with the Static Web Apps CLI (`swa`) tool for local development \\n\\n## Useful Resources\\n\\n 1. [Configuration Overview](https://docs.microsoft.com/azure/static-web-apps/configuration-overview)\\n 2. [Application Configuration: staticwebapp.config.json](https://docs.microsoft.com/azure/static-web-apps/configuration)\\n 3. [Build Configuration: Actions or Pipelines YAML](https://docs.microsoft.com/azure/static-web-apps/build-configuration?tabs=github-actions)\\n 4. [Environment Configurations: For Backends](https://docs.microsoft.com//azure/static-web-apps/application-settings)\\n 5. [Configure Application Settings](https://docs.microsoft.com/azure/static-web-apps/application-settings)\\n 6. [SWA Bank Repo](https://github.com/sinedied/swa-bank) - a Static Web Apps project to explore and learn from."},{"id":"api-enabling-swa","metadata":{"permalink":"/blog/api-enabling-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-04.md","source":"@site/blog/2021-05-04.md","title":"#03: API-Enabling SWA","description":"Welcome to Week 1, Day 3 of #30DaysOfSWA!!","date":"2021-05-04T00:00:00.000Z","formattedDate":"May 4, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"core-concepts","permalink":"/blog/tags/core-concepts"}],"readingTime":5.245,"truncated":false,"authors":[{"name":"Anthony Chu","title":"Senior PM @Microsoft","url":"https://github.com/anthonychu","imageURL":"https://github.com/anthonychu.png","key":"anthony"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"api-enabling-swa","title":"#03: API-Enabling SWA","authors":["anthony","nitya"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#04: Configuring SWA","permalink":"/blog/configuring-swa"},"nextItem":{"title":"#02: Building SWA","permalink":"/blog/building-swa"}},"content":"Welcome to `Week 1, Day 3` of **#30DaysOfSWA**!! \\n\\nYesterday, we built and deployed our first Static Web App (using a vanillaJS template) from a GitHub repo. We used the VS Code Extension and, with just a few clicks, it setup automated GitHub Actions (CI/CD) workflows for us transparently. Today - we learn how we can add **serverless API endpoints** to our application using Azure Functions, helping us scale APIs more effectively with demand.\\n\\n## What We\'ll Cover\\n * Why go Serverless with SWA?\\n * Add API with Azure Functions\\n * Quickstart: Use Managed Functions\\n * Bring Your Own Functions\\n * **Example:** Bring [Azure-SWAG](https://github.com/sinedied/azure-swag/) to May 4!\\n * **Exercise:** Try it out yourself!\\n\\n\\n![](../static/img/series/03-banner.png)\\n\\n## Why Go Serverless?\\n\\nWhen [Introducing SWA](2021-05-02.md), we talked about how static web apps are architected to separate **static content assets** and **dynamic API endpoints** into separate components that can be served and scaled independently.\\n\\nIn yesterday\'s post we looked at a basic Static Web App with just content assets (no API). Deploying it with SWA helped us take advantage of Azure\'s globally-distributed content servers for fast and cost-effective access. Today, we want to add an API endpoint to support dynamic requests from clients. So what does serverless mean, and how do we implement serverless API endpoints?\\n\\nIn this context, [Serverless](https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/serverless/web-app) is about using an event-driven architecture to allocate our compute resources on-demand. So, our API server will scale as demand grows, but be cost-effective when demand drops.\\n\\n[Azure Functions](https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview) makes implementing your serverless solutions easier. Event handling is implemented with _functions_ (code blocks) that run on compute resources that are dynamically-allocated. Resources can spin up as API requests grow, and spin down as demand drops. [**Try this learning path**](https://docs.microsoft.com/en-us/learn/paths/create-serverless-applications/) for a deep-dive into using Azure Functions.\\n\\n## Use Azure Functions\\n\\nStatic Web Apps and Azure Functions are integrated seamlessly, enabling key features with respect to security (user data) and routing integrations:\\n\\n * **[User data access](https://docs.microsoft.com/en-us/azure/static-web-apps/user-information?tabs=javascript#api-functions)** - API functions can directly access user authenticaton and role-based authorization data when handling requests.\\n * **[API Route access](https://docs.microsoft.com/en-us/azure/static-web-apps/configuration?#routes)** - the application can access the `/api` route securely, without requiring custom CORS rules.\\n \\nBut it gets better. Your SWA can be configured for Azure Functions in two ways:\\n \\n* **Managed Functions** - where the Azure Static Web Apps service configures and manages your Azure Functions deployment.\\n* **Bring Your Own Functions** - where you use a pre-existing Azure Functions application and manage the deployment yourself.\\n\\nThe Free plan supports only the Managed Functions option. It has [some limitations](https://docs.microsoft.com/en-us/azure/static-web-apps/apis) - e.g., supports only HTTP triggers and lacks support for [Durable Functions](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview) etc. - but is quick to setup and seamless to use. We\'ll explore this option today but look for a post in Week 4 that will discuss the _[Bring Your Own Functions](https://docs.microsoft.com/en-us/azure/static-web-apps/functions-bring-your-own)_ approach in detail.\\n\\n\\n## Adding the API\\n\\nWant to get some hands-on experience with adding an API endpoint to your Static Web Apps deployment? Check out this [Quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/add-api?tabs=vanilla-javascript) tutorial that builds on the vanilla-JS application you deployed previously. The key steps are:\\n\\n**1. Setup Azure Functions for SWA**\\n * Install the [Azure Functions Extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions) for VS Code.\\n * Open your application root folder (\\"/\\") - create an \\"api\\" subfolder\\n * Select \\"Azure Static Web Apps: Create HTTP Function\\" through Command Palette or select the lightning bolt option in Azure extension menu.\\n * Enter required configuration information (language=\\"JavaScript\\", function name=\\"message\\"), and confirm.\\n\\n_Sit back and wait till the process completes setup._ This populates the `/api` directory with configuration files (*.json) in the root folder, and a `/api/message` subfolder that contains 2 files:\\n\\n * _function.json_ - defines this function\'s trigger, bindings and [other settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference?tabs=blob#function-code).\\n * _index.js_ - implements an async function (accessed at `/api/message`)\\n\\n**2. Update the index.js file to implement your function** - making sure it returns a desired response given the incoming API request and context (input parameters).\\n\\n**3. Update your application code to invoke the API** - you can do this by calling `fetch(\'/api/message\')` directly - the seamless Azure Functions integration ensures that the API routing happens automagically.\\n\\n**4. Test the integration locally with the SWA CLI**.\\nThe Azure Static Web Apps CLI (SWA CLI) is a tool to support local development for Static Web Apps by emulating required services where needed. Follow [these steps](https://docs.microsoft.com/en-us/azure/static-web-apps/add-api?tabs=vanilla-javascript#run-the-frontend-and-api-locally) to install the tools and run/test your app and API together in your local development environment. Look for a detailed 2-part post in Week 3 (\\"Developer Tools\\") where we cover the SWA CLI capabilities, configuration, and usage, in more detail.\\n\\n\\n**5. Update the GitHub Actions workflow with API location**\\n\\nThis is the key step to make sure the Azure Static Web Apps deployment workflow also picks up the new API function.\\n * Open the default GitHub Actions workflow file for your SWA and update the `api_location` property to \\"api\\".\\n * Save and commit changes to trigger rebuild and deploy.\\n\\n\\n**Want to see API in action?** Scroll down to the `Exercise` section where we walk through a quick activity you can do to build and deploy a Static Web App with GitHub (SWAG) _and celebrate #StarWars Day_ in the process!\\n\\n**Prefer a video tutorial?** Check out this [Azure Static Web Apps: Tips & Tricks](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/) that walks through the process from a _react-starter_ template, and showcases the use of remote [development container](https://code.visualstudio.com/docs/remote/create-dev-container) for Visual Studio Code that further streamlines your development experience.\\n\\n<iframe width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-add-an-api-to-your-azure-static-web-app-7-of-16--azure-tips-and-tricks-static-web-apps\\"></iframe>\\n\\n\\n## Exercise: SWAG!\\n\\nToday is May 4 - Star Wars Day! Wouldn\'t it be nice if we could celebrate this with our favorite Star Wars quotes? Thankfully, [my colleague Yohan](https://www.twitter.com/sinedied) has a great [Azure-SWAG](https://dev.to/sinedied/the-easy-way-to-serverless-web-apps-and-apis-with-azure-swag-2heb) template that combines images from [Unsplash](https://unsplash.com) with a pre-defined set of quotes in an API function (\\"/api/quote\\") \\n\\n**So I created a version for my [May 4 homage](ttps://github.com/nitya/may4-swag)**. Here\'s what that looks like when deployed. Refresh the SWA to get a new image and quote each time (from the API).\\n\\n![May The Fourth Homage App](../static/img/series/03-may4.png)\\n\\n * See the [Code Repository](https://github.com/nitya/may4-swag)\\n * See the [Deployed SWA](https://agreeable-tree-0a216f70f.1.azurestaticapps.net/)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYour assignment: follow [these steps](https://github.com/nitya/may4-swag#steps) to replicate my project, then explore the [index.js](https://github.com/nitya/may4-swag/blob/main/api/quote/index.js) code to see how the `/api/quote` function is implemented and review the [`app.js`](https://github.com/nitya/may4-swag/blob/main/app.js) code to see how that API is invoked within the application.\\n\\n\\n## Useful Resources\\n- [API Support in SWA](https://docs.microsoft.com/en-us/azure/static-web-apps/apis)\\n- [Add API with Managed Functions](https://docs.microsoft.com/en-us/azure/static-web-apps/add-api?tabs=vanilla-javascript)\\n- [Bring Your Own Functions](https://docs.microsoft.com/en-us/azure/static-web-apps/functions-bring-your-own)\\n- [May4-Swag Demo](https://github.com/nitya/may4-swag)"},{"id":"building-swa","metadata":{"permalink":"/blog/building-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-03.md","source":"@site/blog/2021-05-03.md","title":"#02: Building SWA","description":"Welcome to Week 1, Day 2 of #30DaysOfSWA!!","date":"2021-05-03T00:00:00.000Z","formattedDate":"May 3, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"core-concepts","permalink":"/blog/tags/core-concepts"}],"readingTime":6.025,"truncated":false,"authors":[{"name":"Glaucia Llemos","title":"Cloud Advocate @Microsoft","url":"https://github.com/glaucia86","imageURL":"https://github.com/glaucia86.png","key":"glaucia"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"building-swa","title":"#02: Building SWA","authors":["glaucia","nitya"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#03: API-Enabling SWA","permalink":"/blog/api-enabling-swa"},"nextItem":{"title":"#01: Introducing SWA","permalink":"/blog/introducing-swa"}},"content":"Welcome to `Week 1, Day 2` of **#30DaysOfSWA**!! \\n\\nYesterday we got a quick introduction to Azure Static Web Apps (what it is, how it\'s architected, and 10 features that make it useful to modern web developers). Today, it\'s time to dive to dive into _Building Static Web Apps_.\\n\\n\\n## What We\'ll Cover\\n * How can I get started with SWA?\\n * Using SWA with personal and production projects.\\n * Building & Deploying your first SWA\\n * **Tutorial** Let\'s Build a Classic Movie Crawler!\\n * **Exercise** Your turn! And `#MayThe4thBeWithYou`\\n * **Resources:** [Static Web Apps Quickstarts](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript)\\n\\n![](../static/img/series/02-banner.png)\\n\\n## 1. Getting Started \\n\\nThe Azure Static Web Apps service makes it easy to publish your modern web application directly from its codebase. Let\'s walk through that process for a basic web application (HTML, CSS, JS) first, to understand the development workflow and configuration options.\\n\\n### 1.1 Requirements\\n\\nTo do this quickstart, you\'ll need \\n * a [GitHub account](https://github.com/) - you can [signup](https://github.com/signup) for a free one if needed.\\n * an [Azure account](https://portal.azure.com) - you can [signup](https://azure.microsoft.com/en-us/free/) for a free account to start.\\n * [Visual Studio Code](https://code.visualstudio.com/) and [this VS Code Extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) - if you favor IDEs.\\n\\nThis approach assumes you favor using an IDE for development, and want to streamline build/deploy into that workflow. I\'m a fan of Visual Studio Code so I\'ll use this approach. If you prefer to use the command line, or a browser, we have you covered! \\n * [Quickstart: With Azure CLI](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-cli?tabs=vanilla-javascript) - for commandline-driven workflow.\\n * [Quickstart: With Azure Portal](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-portal?tabs=vanilla-javascript&pivots=github) - for browser-driven workflow.\\n\\n### 1.2 Final Outcome\\n\\nThe goal is to take this basic HTML/CSS/JS application and configure it for automatic build/deploy to Azure Static Web Apps. We\'ll be using this **[official quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript)** which comes with a  [vanilla-JS application starter template](https://github.com/staticwebdev/vanilla-basic/generate) that provides our base application. Feel free to be adventurous and follow these steps with your own vanillaJS codebase.\\n\\nWe\'ll clone that starter first - making **GitHub** our default code-hosting provider. Azure Static Web Apps has flexible deployment options so look at tutorials for **[BitBucket](https://github.com/staticwebdev/vanilla-basic/generate), [GitLab](https://docs.microsoft.com/en-us/azure/static-web-apps/gitlab?tabs=vanilla-javascript) or [Azure DevOps](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-portal?tabs=vanilla-javascript)** if preferred. Watch for the _Deploying SWA_ post later this week for more details.\\n\\n![VanillaJS Quickstart outcome page](../static/img/series/02-vanillajs-start.png)\\n\\nSo what does that vanilla-JS starter app do? Not much - it\'s just a simple title on a blank webpage as shown above. Here\'s what you\'ll end up with when done:\\n\\n - **Hosted SWA**: See the [live-deployment here](https://witty-desert-019fd800f.1.azurestaticapps.net/) \\n - **Codebase**: See the [code source repo here](https://github.com/fearlessly-dev/my-first-swa)\\n\\n\\nReady to do this? Let\'s go!\\n\\n### 1.3 Build Process\\n\\nThe process is captured in [this quickstart document](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript) and has the following steps:\\n \\n * [**Click**](https://github.com/login?return_to=/staticwebdev/vanilla-basic/generate) to generate your vanilla-js app from the template.\\n * [**Clone**](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript#clone-the-repository) the repo to your local machine. Open in Visual Studio Code.\\n * [**Install**](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript#install-azure-static-web-apps-extension) the Azure Static Web Apps extension in VS Code (if not present)\\n * [**Select Azure**](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript#create-a-static-web-app) in the Activity Bar to view Azure Extensions window. You will be prompted to log into Azure and GitHub during this workflow if needed.\\n    1. Select the Static Web Apps section and click \\"+\\" to start SWA setup\\n    2. Select the relevant Azure subscription to use\\n    3. Select the region to deploy to (close to you)\\n    4. Select the \\"Custom\\" preset - use `/src` as app location, leave build empty\\n    5. Press Enter. Watch for a pop-up notification of build status.\\n \\nOnce deployment completes (you should see the success notification), visit the Azure Extensions window again.Look for the project in the Static Web Apps section and right-click for options. Here are three key ones to know:\\n 1. `Browse Site` - click to see the [live-deployed site](https://witty-desert-019fd800f.1.azurestaticapps.net/)\\n 2. `Edit Workflow` - click to see automated [GitHub Actions](https://github.com/fearlessly-dev/my-first-swa/blob/main/.github/workflows/azure-static-web-apps-witty-desert-019fd800f.yml) setup for the SWA.\\n 3. `Open in Portal` - click to manage the SWA in the Azure Portal.\\n\\n**That\'s it!! You just deployed your first Static Web App with just a few clicks and configuration inputs!** \ud83c\udf89\\n\\n\\n### 1.4 Let\'s Unpack\\n\\nSo what happened under the hood? \\n\\nIf you look at your [codebase](https://github.com/fearlessly-dev/my-first-swa) you\'ll see **one key change** - the Azure SWA service [sets up the GitHub Actions workflow](https://github.com/fearlessly-dev/my-first-swa/commit/1441e25149f1573a7010682e0a431263fbd89cb6) for you, directly in the repo using your GitHub credentials. No manual steps needed from you!\\n\\nThe workflow automates the build/deploy process on both code commit (`push`) and contribution (`pull request`) events. So when you make changes to your application code, it triggers the workflow to automatically rebuild and deploy the updated Static Web App. \ud83d\ude4c\ud83c\udffd\\n\\n### 1.5 Video Tutorial\\n\\nWant to see a video walkthrough of the process? Check out this 2-minute [Azure Static Web Apps: Tips & Tricks](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/) video from 2021. It features a different vanilla-JS application but follows the same \\"Quickstart with Visual Studio Code\\" steps so you can see them in action! \\n\\n<iframe width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-deploy-your-first-azure-static-web-apps-3-of-16--azure-tips-and-tricks-static-web-apps\\"></iframe>\\n\\n## 2. \\"There is No Try!\\"\\n\\nYou realize today is May 3rd, right? That means tomorrow is May 4 - and what better way to celebrate our favorite movie call-to-action (`MayTheFourthBeWithYou`) than to pay homage with our own custom crafted movie banner sharing our origin story. \\n\\n![Build a crawler with Azure Static Web Apps](../static/img/series/02-banner-glaucia.png)\\n\\nTry out this 3-part tutorial to take the basic HTML/CSS/JS application to the next level - and recreate the iconic introduction from the classic [Star Wars](https://en.wikipedia.org/wiki/Star_Wars) franchise. Just do the thing! \\n\\n 1. [Part 1: Create basic page and style it with HTML/CSS](https://dev.to/azure/building-star-wars-crawler-with-azure-static-web-apps-part-1-3o39) \\n 2. [Part 2: Bring moving banner to life with JS](https://dev.to/azure/building-star-wars-crawler-with-azure-static-web-apps-part-2-3hc0)\\n 3. [Part 3: Use Visual Studio Code to deploy to Static Web Apps](https://dev.to/azure/building-star-wars-crawler-with-azure-static-web-apps-part-3-41ip)\\n\\n\\n**Please Note:** The tutorial is meant only to illustrate the creation of the banner with CSS/JS/HTML and celebrate an iconic movie on an iconic date! The movie logo, music and other iconic elements remain the property of relevant copyright holders and should not be used without permission. \\n\\n## 3. Let\'s Talk Plans!\\n\\nThe Azure Static Web Apps service comes with [two plans](https://docs.microsoft.com/en-us/azure/static-web-apps/plans) - a **Free** plan that is perfect for Personal projects, and a **Standard** (paid) plan that is more appropriate for apps deployed in production. Check out the [Features Comparison](https://docs.microsoft.com/en-us/azure/static-web-apps/plans#features) to judge what plan is best for you.\\n\\nMy personal experience is that, as an individual developer, the free tier is sufficiently generous to explore ideas and host prototypes (for real-world users) or demos (for validating ideas). The free tier also comes with Managed Functions support (to integrate a serverless API capability) out of the box. You will need the Standard plan if you want to \\"Bring your own functions\\" instead. For the most part, you should be able to try out all the Exercises in #30DaysOfSWA using the Free tier.\\n\\n\\n## 4: Exercise\\n\\nIf you followed along with the quickstart, you should have setup and deployed your first Azure Static Web App using a vanilla-JS starter. Now, time to challenge yourself by trying out one (or both) of these options:\\n\\n * **Complete the other quickstart tutorials** - using [Azure CLI](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-cli?tabs=vanilla-javascript) and [Azure Portal](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript) - to get a sense of how the workflows differ. And join the [#SWAanniversary](2021-04-30.md) event to learn more about [SWA CLI](https://docs.microsoft.com/en-us/azure/static-web-apps/local-development) for local development.\\n * **Build your own movie crawler** - follow Glaucia\'s tutorial to have the default banner running on Azure Static Web Apps - then customize the words to suit _your origin story_ and share it on May 4th ([StarWars Day](https://www.starwars.com/star-wars-day)) - and `MayThe4thBeWithYou!`."},{"id":"introducing-swa","metadata":{"permalink":"/blog/introducing-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-02.md","source":"@site/blog/2021-05-02.md","title":"#01: Introducing SWA","description":"Welcome to Week 1, Day 1 of #30DaysOfSWA!!","date":"2021-05-02T00:00:00.000Z","formattedDate":"May 2, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"core-concepts","permalink":"/blog/tags/core-concepts"}],"readingTime":3.685,"truncated":false,"authors":[{"name":"Simona Cotin","title":"Principal PM @Microsoft","url":"https://github.com/simonaco","imageURL":"https://github.com/simonaco.png","key":"simona"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"introducing-swa","title":"#01: Introducing SWA","authors":["simona","nitya"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#02: Building SWA","permalink":"/blog/building-swa"},"nextItem":{"title":"Kickoff #30DaysOfSWA!","permalink":"/blog/kickoff"}},"content":"Welcome to `Week 1, Day 1` of **#30DaysOfSWA**!! \\n\\nThis week, we\'ll focus on the **Core Concepts** behind Azure Static Web Apps, starting with an introduction to SWA and continuing on to building, enhancing, and deploying, your SWA for users to experience. Let\'s get started today by _Introducing Static Web Apps_.\\n\\n\\n## What We\'ll Cover\\n * What is Azure Static Web Apps?\\n * How is it architected?\\n * Where can I use it?\\n * 10 Key Features to know\\n * **Exercise:** Explore SWA Examples!\\n * **Resource:** [Static Web Apps Overview](https://docs.microsoft.com/en-us/azure/static-web-apps/overview)\\n\\n![](../static/img/series/01-banner.png)\\n\\n## What is Azure SWA?\\n\\n[Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/overview) is a cloud-based service that **automatically** builds and deploys full-stack web apps to Azure **directly from your code repository**. The service works with popular code sources like GitHub, GitLab and BitBucket by default. Look for the _Deploying SWA_ post later this week where we walk through the details here.\\n\\nThe benefit to you as a developer is that it **simplifies your developer experience**. Just commit changes to your application source code into the repository and step back. The SWA service monitors the codebase for changes, automatically rebuilding and redeploying your app to the hosted endpoint. Look for a _Previewing SWA_ post later this week where we\'ll talk about built-in support for previewing apps in non-main branches, or in pull requests, that make it easier to manage apps with multiple contributors.\\n\\nPrefer a 5-minute video overview? We have you covered!\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=what-is-azure-static-web-apps-and-what-can-it-be-used-for-1-of-16--azure-tips-and-tricks-static-web-\\"  frameborder=\\"0\\" ></iframe>\\n\\n## How is it Architected?\\n\\nStatic Web Apps can be built using popular front-end frameworks including React, Angular, Vue, Svelte, or Blazor. These apps typically consist of a collection of **static content assets** (HTML, JS, CSS and media files) coupled with a **dynamic API endpoint** to handle client interactions in real time.\\n\\nTraditional web application deployments use a _single web server_ to serve both the static assets and the API endpoint. This can make scaling these services sub-optimal in terms of global availability and runtime costs.\\n\\nWith Static Web Apps, we **separate static assets from API endpoints**, allowing each to be scaled using the technology best equipped to do this in a cost-effective manner.\\n * Static assets get served from geographically-distributed content servers worldwide, distributing the load and speeding up access to users nearby.\\n * API endpoints are hosted using a [serverless architecture](https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview), spinning up compute resources (to execute functions) only as needed, in response to trigger events.\\n\\nThis architecture - with static content servers, serverless backends, and automated CI/CD workflows - simplifies your development workflow **allowing you to focus your attention on the application logic and user experience** components of your modern web application.\\n\\n\\n![](../static/img/series/01-swa-overview.png)\\n\\n## Where can I use it?\\n\\nThat\'s a great question!! You can use Static Web Apps to:\\n * Build modern web apps with front-end frameworks (like Angular, React, Vue etc.)\\n * Publish static web sites (using Gatsby, Hugo, Astro, Docusaurus, VuePress etc.)\\n * Deploy web apps with frameworks like Next.js and Nuxt.js.\\n\\nYou can [**configure your existing application**](https://docs.microsoft.com/en-us/azure/static-web-apps/front-end-frameworks) to use Azure Static Web Apps using an IDE like VS Code, or using Command-line tools (like Azure CLI and SWA CLI), or through the browser (using the Azure Portal). Look for two posts later this week that dive into this in detail:\\n * _Building SWA_ (tomorrow) on getting started with using SWA in your app.\\n * _Configuring SWA_ (later) on customizing app behaviors and build process.\\n\\nBut wait - there\'s one more thing. \\n\\n**Keep an eye out for an announcement later in the series** where we\'ll be debuting a new [Community Showcase](/showcase) page - here\'s a sneak preview. You can filter it to see examples from popular front-end technologies, select \\"open source\\" to see the repository for inspiration - **and consider adding your own project** at the end of your journey!\\n\\n![](../static/img/swa-showcase.png)\\n\\n\\n## 10 Things To Know!\\n\\nWe\'ve talked about what SWA is, how it\'s architected, and where you can use it. But what are the key features that make it powerful? [**Read the Documentation**](https://docs.microsoft.com/en-us/azure/static-web-apps/overview#key-features) for the detailed list - or scan the visual guide below for a summary!\\n\\n![](../static/img/series/01-ten-things.png)\\n\\n\\n\\n## Exercise:\\n\\nThat was a lot to digest right?  It helps to see some of these ideas in action. So here\'s two things you can do before we dive into the quickstart tomorrow:\\n\\n * Visit the [Showcase Gallery](https://github.com/microsoft/static-web-apps-gallery-code-samples) repository to see some examples of SWA in Action.\\n * Follow the [#staticwebapps](https://dev.to/t/staticwebapps) tag to see community-posted articles on usage."},{"id":"kickoff","metadata":{"permalink":"/blog/kickoff","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-01.md","source":"@site/blog/2021-05-01.md","title":"Kickoff #30DaysOfSWA!","description":"Welcome to the first day of #30DaysOfSWA!!","date":"2021-05-01T00:00:00.000Z","formattedDate":"May 1, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"}],"readingTime":3.8,"truncated":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Reshmi Sriram","title":"PM, Static Web Apps @Microsoft","url":"https://twitter.com/reshsriram","imageURL":"https://github.com/Reshmi-Sriram.png\\\\","key":"reshmi"},{"name":"Simona Cotin","title":"Principal PM @Microsoft","url":"https://github.com/simonaco","imageURL":"https://github.com/simonaco.png","key":"simona"},{"name":"Glaucia Llemos","title":"Cloud Advocate @Microsoft","url":"https://github.com/glaucia86","imageURL":"https://github.com/glaucia86.png","key":"glaucia"},{"name":"Anthony Chu","title":"Senior PM @Microsoft","url":"https://github.com/anthonychu","imageURL":"https://github.com/anthonychu.png","key":"anthony"},{"name":"Joseph Lin","title":"Software Engineer @Microsoft","url":"https://github.com/joslinmicrosoft","imageURL":"https://github.com/joslinmicrosoft.png","key":"joseph"},{"name":"Mitali Karmarkar","title":"Software Engineer @Microsoft","url":"https://twitter.com/KarmarkarMitali","imageURL":"https://pbs.twimg.com/profile_images/1292880690237718529/yFXe2D99_400x400.jpg","key":"mitali"},{"name":"Michail Shaposhnikov","title":"Software Engineer @Microsoft","url":"https://github.com/mishapos","imageURL":"https://github.com/mishapos.png","key":"michail"}],"frontMatter":{"slug":"kickoff","title":"Kickoff #30DaysOfSWA!","authors":["nitya","reshmi","simona","glaucia","anthony","joseph","mitali","michail"],"tags":["swa","30days"],"draft":false},"prevItem":{"title":"#01: Introducing SWA","permalink":"/blog/introducing-swa"},"nextItem":{"title":"It\'s the SWA-anniversary!!","permalink":"/blog/swanniversary"}},"content":"Welcome to the first day of **#30DaysOfSWA**!!\\n\\nThank you for joining us on this fun and functional tour of **Azure Static Web Apps**. Whether you\'re new to the technology, or an experienced user, we hope there\'s something that interests and motivates you to keep going.\\n\\n![](../static/img/series/banner-kickoff.png)\\n\\n## Hello #30DaysOfSWA\\n\\nSimply put, it\'s a month-long series of blog posts that provides you a curated and structured tour through the universe of  [Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/overview?WT.mc_id=30daysofswa-61155-cxall). \\n\\n * Each article will be 5 mins or less in reading time\\n * Each ends with an activity to help reinforce the learning\\n * Articles will follow a structured roadmap over 4 weeks\\n\\nWe\'ve organized the journey into four stages, each building on the previous one in a way that mimics the developer experience with any new technology:\\n * **Week 1:** Focus on Core Concepts, learning terminology and getting setup.\\n * **Week 2:** Focus on Usage Examples with quickstarts & front-end technologies.\\n * **Week 3:** Focus on Dev Tools to develop, debug, test, and deploy, the SWA!\\n * **Week 4:** Focus on Best Practices, from services to end-to-end experiences.\\n\\n## Week 1 Roadmap\\n\\nWe are kicking off week 1 with a focus on **Core Concepts** to get you familiar with the high-level architecture, fundamental components and basic terminology for Azure Static Web Apps. Want a sneak peek at the topics? Here\'s a visual guide to help you!\\n\\n![Visual sketchnote of roadmap](../static/img/series/week1-roadmap.png)\\n\\n**By the end of week 1 you should know**:\\n * What Azure Static Web Apps is, and its benefits\\n * How to get started building SWA or using it for your existing apps\\n * How to go serverless, adding API capability with Azure Functions\\n * How to configure SWA - from app behavior to build process\\n * How to secure SWA - from user authentication to role-based authorization\\n * How to preview SWA - on pull requests or test branches\\n * How to deploy SWA - using different code sources, or CI/CD options\\n\\nBy the end of the week you should be familiar with SWA terminology and developer workflows - and be ready to explore usage scenarios with various front-end frameworks or static site generators!\\n\\n## Take The Journey\\n\\nThey say it takes 30 days to make a habit. It\'s our hope that doing short bursts of reading and activity with Azure Static Web Apps on a daily basis, will lead to better learning and development habits in general.\\n\\nWe want to make it easy for you to participate - here are options to follow along:\\n * Bookmark [this site](https://aka.ms/30DaysofSWA) and visit daily\\n * Subscribe to the [RSS Feed](https://aka.ms/30DaysOfSWA/rss) in your favorite Feed Reader\\n * Visit the [dev.to Series Page](https://dev.to/nitya/series/17901) and like, comment on, or bookmark, the posts.\\n\\nWant to really get the most from this? Try the exercises each day, and take a moment on a weekly basis, to write a blog post or capture your own notes on what your main takeaways were. As a fan of [visual storytelling](https://twitter.com/sketchthedocs) I know that writing things down helps improve your understanding and recall of the material!\\n\\n## Provide Us Feedback\\n\\n**We want to make this useful and beginner-friendly!** So if you have comments or questions that can help us improve this content, please drop us a note in our [Discussions](https://github.com/orgs/staticwebdev/discussions/categories/-30daysofswa) board!\\n\\n\\n## Meet The Authors\\n\\nArticles are written by a multi-disciplinary team of contributors from across Microsoft and the community - including members of the Static Web Apps product group and Microsoft Developer Relations. \\n\\n![Banner with people](../static/img/series/series-people.png)\\n\\nWe\'ll keep this page updated on a daily basis, to reflect the latest author whose post was published. We\'ll kick things off with the authors of this post.\\n * **Nitya Narasimhan**, Senior Cloud Advocate @Microsoft\\n * **Reshmi Sriram**, Static Web Apps PM @Microsoft\\n * **Simona Cotin**, Principal PM @Microsoft \\n * **Glaucia Lemos**, JS Cloud Advocate @Microsoft\\n * **Anthony Chu**, Senior Product PM @Microsoft\\n * **Joseph Lin** Software Engineer @Microsoft, \\n * **Mitali Karmarkar**, Software Engineer @Microsoft\\n * **Michail Shaposhnikov**, Software Engineer @Microsoft\\n * **Chris Noring**, Senior Cloud Advocate @Microsoft\\n * **Jen Looper**, Principal Cloud Advocate @Microsoft\\n * _to be updated daily ..._\\n\\nEach post will identify the authors by name, and link to a relevant online profile. This series is a labor of love, so if you like a post - show that author some love by providing feedback or saying hello on their identified profile!\\n\\n---\\n\\n## Let\'s Get Started!\\n\\nI think that\'s all you need to know for now! Hope your\'re as excited as we are. Check back for the next post and ... **#LetsDoThis** !!\\n\\n![](../static/img/logo.svg)"},{"id":"swanniversary","metadata":{"permalink":"/blog/swanniversary","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-04-30.md","source":"@site/blog/2021-04-30.md","title":"It\'s the SWA-anniversary!!","description":"View Schedule & Speaker Lineup//aka.ms/swaanniversary","date":"2021-04-30T00:00:00.000Z","formattedDate":"April 30, 2021","tags":[{"label":"swa","permalink":"/blog/tags/swa"},{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"event","permalink":"/blog/tags/event"}],"readingTime":2.37,"truncated":false,"authors":[{"name":"Reshmi Sriram","title":"PM, Static Web Apps @Microsoft","url":"https://twitter.com/reshsriram","imageURL":"https://github.com/Reshmi-Sriram.png\\\\","key":"reshmi"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"swanniversary","title":"It\'s the SWA-anniversary!!","authors":["reshmi","nitya"],"tags":["swa","30days","event"],"draft":false},"prevItem":{"title":"Kickoff #30DaysOfSWA!","permalink":"/blog/kickoff"}},"content":"![](../static/img/swanniversary.png)\\n\\n#### View Schedule & Speaker Lineup: [https://aka.ms/swaanniversary](https://aka.ms/swaanniversary)\\n\\n---\\n\\nOn May 12, 2021, the [Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/overview?WT.mc_id=30daysofswa-61155-cxall) service hit a significant milestone - [becoming generally available](https://azure.microsoft.com/en-us/updates/azure-static-web-apps-is-now-generally-available/?WT.mc_id=30daysofswa-61155-cxall) with support for many of the popular [front-end frameworks and static site generators](https://docs.microsoft.com/en-us/azure/static-web-apps/front-end-frameworks) used for modern web app development.\\n\\nOn May 12, 2022, Azure Static Web Apps will make the first-year anniversary of that milestone - making this the perfect time to look back on all the progress made, and look ahead to what\'s in store next.\\n\\n\\n## Celebrate with #SWAanniversary\\n\\nOn May 19, 2022, join us live on [Learn TV](https://docs.microsoft.com/en-us/learn/tv/?WT.mc_id=30daysofswa-61155-cxall) for a 2-hour celebration with some of our favorite speakers and guests from both Microsoft and the larger developer community. Can you tell we\'re excited for this birthday?\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/OGlM5CgCwwc\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nCheck out [the Event page](https://docs.microsoft.com/en-us/events/learntv/swa-anniversary-may-2022/?WT.mc_id=30daysofswa-61155-cxall) to learn more about the speakers and topics on the agenda. Add the event to your calendar, and join us live - or bookmark this page and revisit it for links to relevant resources and video replays.\\n\\n\\n## Learn with #30DaysOfSWA\\n\\nBut there\'s more! _Are you new to Azure Static Web Apps?_ Do you want to get a beginner-friendly tour of the core concepts, usage examples, developer tools, and best practices involved in building and deploy modern web applications with this service?\\n\\n**You\'re in luck!**\\n\\nWatch this space for an update on a new content series that will help you jumpstart that learning journey! Throughout the month of May, we\'ll bring together a diverse group of technologists to share short articles with resources and insights on a curated tour of Static Web Apps - taking you from **code to scale**.\\n\\n![The #30DaysOfSWA logo](../static/img/logo-light.png)\\n\\n\\n## How Can You Participate?\\n\\nSome actions you can take today to get ready for a fun month of learning:\\n \\n  * Bookmark this Series page or [**Subscribe to the RSS feed**](https://aka.ms/30DaysOfSWA/rss)\\n  * Follow the [**#staticwebapps tag on dev.to**](https://dev.to/t/staticwebapps) - and consider making a post there!\\n  * Introduce yourself on [**our Discussions Forum**](https://github.com/orgs/staticwebdev/discussions/categories/-30daysofswa) - tell us what you hope to learn!\\n\\n\\n## Self-Study Resources\\n\\nOur goal is to help make this a beginner-friendly learning journey into Azure Static Web Apps. We hope we inspire you to keep going beyond #30Days - and wanted to share resources to motivate you to keep going. Here are three links to bookmark:\\n\\n * The [**Resources**](/resources) page - will be updated with links related to each article in the series, all through May! Use this to explore detours and deep dives.\\n * The [**Microsoft Learn Path**](https://docs.microsoft.com/en-us/learn/paths/azure-static-web-apps/?WT.mc_id=30daysofswa-61155-cxall) - teaches you how to build your first Static Web Apps powered experience - with React, Angular, Vue and Blazor coding options.\\n * The [**#30DaysOfSWA Collection**](https://docs.microsoft.com/en-us/users/nityan/collections/7d2ws6zd1mxmp6?WT.mc_id=30daysofswa-61155-cxall) - a Microsoft-specific collection of resources (from documentation to videos and code samples) that I will continue to update."}]}')}}]);
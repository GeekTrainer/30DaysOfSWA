"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[362],{6222:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"deploying-swa","metadata":{"permalink":"/30DaysOfSWA/blog/deploying-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-08.md","source":"@site/blog/2021-05-08.md","title":"#07: Deploying SWA","description":"Welcome to Week 1, Day 7 of #30DaysOfSWA!!","date":"2021-05-08T00:00:00.000Z","formattedDate":"May 8, 2021","tags":[{"label":"swa","permalink":"/30DaysOfSWA/blog/tags/swa"},{"label":"30days","permalink":"/30DaysOfSWA/blog/tags/30-days"},{"label":"core-concepts","permalink":"/30DaysOfSWA/blog/tags/core-concepts"}],"readingTime":2.61,"truncated":false,"authors":[{"name":"Reshmi Sriram","title":"PM, Static Web Apps @Microsoft","url":"https://twitter.com/reshsriram","imageURL":"https://github.com/Reshmi-Sriram.png\\\\","key":"reshmi"}],"frontMatter":{"slug":"deploying-swa","title":"#07: Deploying SWA","authors":["reshmi"],"tags":["swa","30days","core-concepts"],"draft":false},"nextItem":{"title":"#06: Previewing SWA","permalink":"/30DaysOfSWA/blog/previewing-swa"}},"content":"Welcome to `Week 1, Day 7` of **#30DaysOfSWA**!! \\n\\nYou made it this far! Give yourself a pat on your back already! \ud83d\ude0a  \\n\\nBy now, we have learnt what Static Web Apps is, and how to build, add APIs and configure the application. We\u2019ve also deployed a couple of fun apps as a tribute to Star Wars! But we\u2019ve so far explored deploying using the Github Actions path. \\n * What if we want some other CI/CD tool? \\n * What if our project resides safely in an Azure DevOps repository? \\n * What if we don\u2019t want a CI/CD solution AT ALL? \\n \\nFear not! Because today we\u2019re gonna explore other ways of deploying a Static Web App on Azure \ud83d\ude0a \\n\\n\\n## What We\'ll Cover\\n * Deploy With Azure DevOps  \\n * Deploy From GitLab and BitBucket \\n * Deploy Using ARM Template \\n * **Exercise**: Explore the\u202f[ARM Tools VS Code Extension](https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/quickstart-create-templates-use-visual-studio-code?tabs=CLI)\\n\\n![](../static/img/series/07-banner.png)\\n\\n \\n## Deploy with Azure DevOps \\n\\nDeploying using Azure pipelines CI/CD has never been easier! \\n\\nStatic Web Apps supports projects which are stored in Azure repos and helps in creating a smooth CI/CD pipeline to automatically trigger the changes on every commit to the main branch. What more? With the latest changes checked in for Azure DevOps, we can now [set up the azure pipeline via Portal with a single click](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-portal?tabs=vanilla-javascript&pivots=azure-devops)! Here\u2019s a quick video demonstrating how to use DevOps as a pipeline, as well as touching on the numerous other enhancements brought in off-late, such as stable staging environments, password protected websites, build and deploy split, and lots more! \ud83d\ude0a \\n\\n<iframe  width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://www.youtube.com/embed/4JkfeZp7aDk\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\\n \\n## Deploy via GitLab and BitBucket \\n\\nBut what if we wanted a third-party Provider? Static Web Apps as of today [officially supports](https://azure.microsoft.com/en-us/updates/public-preview-static-web-apps-now-supports-gitlab-and-bitbucket-for-cicd/) CI/CD pipelines from GitLab and BitBucket! We just have to follow a few simple steps as discussed in the documentation for both [GitLab](https://docs.microsoft.com/en-us/azure/static-web-apps/gitlab?tabs=vanilla-javascript) and [BitBucket](https://docs.microsoft.com/en-us/azure/static-web-apps/bitbucket?tabs=vanilla-javascript), and voila! We\u2019ll have a beautifully configured pipeline which takes care of the automatic trigger on commits for us. Isn\u2019t this beautiful? \ud83d\ude0a \\n\\n \\n## Deploy using ARM Template \\n\\nFor the CLI lovers out there, we can also deploy in Static Web Apps [using ARM Templates](https://docs.microsoft.com/en-us/azure/static-web-apps/publish-azure-resource-manager?tabs=azure-cli)! The ARM - or [Azure Resource Manager Template](https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/overview) - is used in preparing the workflow template. On deploying the ARM Template to Azure Static Web Apps, it triggers the Github Actions, which further takes care of our CI/CD needs. Do check out the exercise later in the blog for a quick hands-on using ARM Templates!  \\n\\n\\nBut what about .. **deploying without a CI/CD??** \\n\\nSuppose we want a one-time deployment solution? Or we don\u2019t want to depend on a CI/CD tool at all! No worries! We have you covered! Wonder how that is supported? Stay tuned to the #30DaysOfSWA series and **discover the new upcoming features** to enable this! \ud83d\ude09 <3<3  \\n\\n\\n## Resources\\n\\nNow that we\u2019ve explored the alternatives we have, let\u2019s go have some fun with it!! Here are a few quickstarts you can try out!\\n\\n1. [Deploy using BitBucket](https://aka.ms/swabitbucketsupport) \\n2. [Deploy using GitLab](https://aka.ms/swagitlabsupport) \\n3. [Deploy using Azure DevOps and Portal Quickstart](https://aka.ms/static-web-apps-publish-devops)  \\n4. [Use an ARM template quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/publish-azure-resource-manager?tabs=azure-cli)"},{"id":"previewing-swa","metadata":{"permalink":"/30DaysOfSWA/blog/previewing-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-07.md","source":"@site/blog/2021-05-07.md","title":"#06: Previewing SWA","description":"Welcome to Week 1, Day 6 of #30DaysOfSWA!!","date":"2021-05-07T00:00:00.000Z","formattedDate":"May 7, 2021","tags":[{"label":"swa","permalink":"/30DaysOfSWA/blog/tags/swa"},{"label":"30days","permalink":"/30DaysOfSWA/blog/tags/30-days"},{"label":"core-concepts","permalink":"/30DaysOfSWA/blog/tags/core-concepts"}],"readingTime":6.425,"truncated":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Michail Shaposhnikov","title":"Software Engineer @Microsoft","url":"https://github.com/mishapos","imageURL":"https://github.com/mishapos.png","key":"michail"}],"frontMatter":{"slug":"previewing-swa","title":"#06: Previewing SWA","authors":["nitya","michail"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#07: Deploying SWA","permalink":"/30DaysOfSWA/blog/deploying-swa"},"nextItem":{"title":"#05: Securing SWA","permalink":"/30DaysOfSWA/blog/securing-swa"}},"content":"Welcome to `Week 1, Day 6` of **#30DaysOfSWA**!! \\n\\nWe\'re almost at the end of week 1!! \ud83c\udf89 \\n\\nSo far, we\'ve learned how we can use the _static assets hosting_ (Azure Static Web Apps) and _serverless API_ (Azure Functions) capabilities to build and deploy a web application in a scalable and cost-effective way. And we learned to _configure_ and _secure_ our Static Web App to suit our needs. So what else do we need to talk about?\\n\\n**Deployment** options? Let\'s do it!! We\'ve talked about the default experience so far: deploy from a _production_ branch, using _GitHub_ Actions for CI/CD. But how do we handle **previewing** the Static Web App before production deploys? Let\'s talk about previewing SWA in pull requests, on non-production branches, and in pre-configured named environments that make our staging workflows more productive.\\n\\n\\n## What We\'ll Cover\\n * What types of deployment does SWA support?\\n * _Previewing_: in Pull Requests\\n * _Previewing_: in Non-Production Branches\\n * _Previewing_: in Named Environments\\n * _Deploying_: to Custom Domains\\n * **Exercise:** [Review PR using SWA Preview Capability](https://docs.microsoft.com/en-us/azure/static-web-apps/review-publish-pull-requests)\\n\\n![](../static/img/series/06-banner.png)\\n\\n## Deployment Types\\n\\nWhen we think about deployment, we are typically thinking of two kinds of environments: _production_ which serve as the primary endpoint for real world use, and _staging_  that can be used for internal testing, early validation of preview releases.\\n\\nAzure Static Web Apps has built-in support for four types of environments:\\n\\n * _Production_: This is the real world deployment endpoint that is **indexed by search engines**, and associated with the custom domain (if configured).\\n * _Pull Request (PR)_: This is a **temporary** environment setup for a Pull Request, and torn down when that PR is closed.\\n * _Branch_: This is a environment you can set up for non-production branches, at a **stable** URL for the lifetime of the branch.\\n * _Named_: The above environments have URLs that reflect their PR (number) or branch (name). You can also configure a **stable** preview environment with a fixed name, associated with some deployment context (e.g., an interim release)\\n\\nProduction deploys have URLs like `<DEFAULT-HOSTNAME>-<NUMBER>.azurestaticapps.net` where the `DEFAULT-HOSTNAME` is unique for each application. \\n\\nWith _preview_ environments, the URL looks like: `<DEFAULT_HOSTNAME>-<BRANCH_OR_ENVIRONMENT_NAME>.<LOCATION>.azurestaticapps.net` where the `LOCATION` reflects the deployment region, and the `BRANCH_OR_ENVIRONMENT_NAME` can also take the form of a branch name, a named environment, or a number in the case of pull requests.\\n\\nLet\'s take a brief look at each of these.\\n\\n\\n## Pull Requests\\n\\nCurrently Pull Request _preview environments_ are available for projects hosted in GitHub, and configured to use GitHub Actions by Azure Static Web Apps:\\n  * Every PR to a _watched branch_ gets a dedicated but **temporary** pre-production staging environment that is torn down when the PR is closed.\\n  * Use it to validate changes, perform sanity checks, etc.\\n  * The environment is automatically rebuilt and deployed if new commits are made to the branch associated with an active PR.\\n  * The staged environment is _publicly visible_ event if your GitHub repo is private - though the URL is not easily discoverable (i.e., not indexed by search engines) by default.\\n\\nLearn how to [preview Pull Requests in Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/review-publish-pull-requests).\\n\\n\\n## Branches\\n\\nPreview environments for branches will have **stable** URLs. Configure them in the relevant _GitHub Actions_ or _Azure Pipelines_ workflow files as [shown in this example](https://docs.microsoft.com/en-us/azure/static-web-apps/branch-environments?tabs=github-actions#example). \\n\\nFor example, in a GitHub Actions context, this involves two steps:\\n * set the `production_branch` property to the branch you want to use as the source for that production deployment.\\n * list all other branches that you want preview environments for under `trigger` (Azure Pipelines) or `push: branches` (in GitHub Actions).\\n\\nYou can use a wildcare (`**` for GitHub Actions, `*` for Azure Pipelines) if you want to track _all_ branches for preview environment support. \\n\\nHere\'s an example GitHub Actions config file - the **production** environment is built from the _main_ branch, and separate **preview** environments are built for the other listed branches (_dev_ and _staging_).\\n\\nLearn how to [create branch preview environments in Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/branch-environments?tabs=github-actions).\\n \\n```\\nname: Azure Static Web Apps CI/CD\\n\\non:\\n  push:\\n    branches:\\n      - main\\n      - dev\\n      - staging\\n  pull_request:\\n    types: [opened, synchronize, reopened, closed]\\n    branches:\\n      - main\\n\\njobs:\\n  build_and_deploy_job:\\n    ...\\n    name: Build and Deploy Job\\n    steps:\\n      - uses: actions/checkout@v2\\n        with:\\n          submodules: true\\n      - name: Build And Deploy\\n        id: builddeploy\\n        uses: Azure/static-web-apps-deploy@v1\\n        with:\\n          ...\\n          production_branch: \\"main\\"\\n```\\n\\n\\n## Named Envs\\n\\nSometimes, you want to have a non-production preview environment that is at _stable_ URL (not tied to a specific PR number or branch name), and that gets rebuilt on commits to _all tracked branches_ in the configuration file. \\n\\nJust like with branches, this requires a manual change to your default configuration file (GitHub Actions or Azure Pipelines) as [shown in this example](https://docs.microsoft.com/en-us/azure/static-web-apps/named-environments?tabs=github-actions#configuration).\\n\\nIn the GitHub Actions case, the steps are:\\n * Set the `deployment_environment` property (in the relevant build job) to be the **name** you want to use for this preview environment\\n * List the branches you want associated with this named environment under `push: branches` - commits to those will result in rebuild/deploy to this environment.\\n\\nHere\'s an example GitHub Actions configuration file - this sets up a named environment called **release** which gets updated when changes are made to **any** branch (reflected by the `**` wildcard), and deployed to a site with a URL like `<DEFAULT_HOST_NAME>-release.<LOCATION>.azurestaticapps.net`.\\n\\nLearn about [named preview environments in Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/named-environments?tabs=github-actions)\\n\\n```\\nname: Azure Static Web Apps CI/CD\\n\\non:\\n  push:\\n    branches:\\n      - \\"**\\"\\n  pull_request:\\n    types: [opened, synchronize, reopened, closed]\\n    branches:\\n      - main\\n\\njobs:\\n  build_and_deploy_job:\\n    ...\\n    name: Build and Deploy Job\\n    steps:\\n      - uses: actions/checkout@v2\\n        with:\\n          submodules: true\\n      - name: Build And Deploy\\n        id: builddeploy\\n        uses: Azure/static-web-apps-deploy@v1\\n        with:\\n          ...\\n          deployment_environment: \\"release\\"\\n```\\n\\n\\n## Custom Domains\\n\\nYou may have noticed that default deployment URLs - in the form `XXX.azurestaticapps.net` for production environments or `XXX.<LOCATION>.azurestaticapps.net` for preview environments - are not exactly user friendly for use and recall. \\n\\nAdding a custom domain helps. Azure Static Apps makes that easy with options to also configure **subdomains** and an **apex domain**! Here, given a domain like `www.azure.com`, `azure.com` is the apex domain and `www` is the relevant subdomain.\\n\\nSo how do you configure these? You have two options:\\n* Use an **external DNS Provider** (if your domain registrar supports it)\\n* Use **Azure DNS** (to manage your DNS domain, even if purchased elsewhere)\\n\\nTo keep this post short, we won\'t go into details for each of these options. Instead check out these links based on the direction you want to go in:\\n * Setup Apex Domain - with [Azure DNS](https://docs.microsoft.com/en-us/azure/static-web-apps/apex-domain-azure-dns) | with [External Provider](https://docs.microsoft.com/en-us/azure/static-web-apps/apex-domain-external)\\n * Setup Subdomain - with [Azure DNS](https://docs.microsoft.com/en-us/azure/static-web-apps/custom-domain-azure-dns) | with [External Provider](https://docs.microsoft.com/en-us/azure/static-web-apps/custom-domain-external)\\n\\n---\\n\\n## How-Tos: Watch It!\\n\\nPrefer a Video Walkthrough to understand the process? We have you covered with the [Azure Tips And Tricks: Static Web Apps](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/) series. Check out this video to understand how you can setup a custom domain for your Static Web App!\\n\\n<iframe   width=\\"560\\" height=\\"315\\" frameborder=\\"0\\"  src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-set-up-a-custom-domain-name-in-azure-static-web-apps-10-of-16--azure-tips-and-tricks-static-w\\"></iframe>\\n\\n---\\n\\n## Exercise: Try it!\\n\\n**Pull Requests** are critical to having a productive open source or multi-contributor project, so it\'s important to know how Azure Static Apps works in setting up **pre-production** environments for validating the changes proposed in a pull-request, before merging it for production deployment.\\n\\nGet hands-on experience with the process by completing [this tutorial](https://docs.microsoft.com/en-us/azure/static-web-apps/review-publish-pull-requests) on an existing Azure Static Web Apps project. \\n\\n_At present, the staged pre-production environment for Pull Requests is available only for GitHub Actions deployments - so make sure you pick a GitHub-hosted SWA project that already had the default workflows set up_.\\n\\n---\\n\\n## Useful Resources\\n\\n1. [Preview environments in Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/preview-environments)\\n2. [Pull-Request Preview Environments](https://docs.microsoft.com/en-us/azure/static-web-apps/review-publish-pull-requests)\\n3. [Branch Preview Environments](https://docs.microsoft.com/en-us/azure/static-web-apps/branch-environments)\\n4. [Named Preview Environments](https://docs.microsoft.com/en-us/azure/static-web-apps/named-environments)\\n5. Video Series: [Azure Tips And Tricks - Static Web Apps](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/)\\n6. [About Custom Domains](https://docs.microsoft.com/en-us/azure/static-web-apps/custom-domain)"},{"id":"securing-swa","metadata":{"permalink":"/30DaysOfSWA/blog/securing-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-06.md","source":"@site/blog/2021-05-06.md","title":"#05: Securing SWA","description":"Welcome to Week 1, Day 5 of #30DaysOfSWA!!","date":"2021-05-06T00:00:00.000Z","formattedDate":"May 6, 2021","tags":[{"label":"swa","permalink":"/30DaysOfSWA/blog/tags/swa"},{"label":"30days","permalink":"/30DaysOfSWA/blog/tags/30-days"},{"label":"core-concepts","permalink":"/30DaysOfSWA/blog/tags/core-concepts"}],"readingTime":5.575,"truncated":false,"authors":[{"name":"Mitali Karmarkar","title":"Software Engineer @Microsoft","url":"https://twitter.com/KarmarkarMitali","imageURL":"https://pbs.twimg.com/profile_images/1292880690237718529/yFXe2D99_400x400.jpg","key":"mitali"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"securing-swa","title":"#05: Securing SWA","authors":["mitali","nitya"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#06: Previewing SWA","permalink":"/30DaysOfSWA/blog/previewing-swa"},"nextItem":{"title":"#04: Configuring SWA","permalink":"/30DaysOfSWA/blog/configuring-swa"}},"content":"Welcome to `Week 1, Day 5` of **#30DaysOfSWA**!! \\n\\nSo far, we\'ve learnt to build/deploy a basic web app, add a serverless API endpoint and customize the configuration settings for both application behaviors and build workflows. But we forgot one thing - the **user**! To create _differentiated_ experiences for users, we need ways to **identify them** and **understand their role** in the application context. We can then use that information to **manage user access to application features** (role-based authorization) as well as **application access to user information** (once authenticated).\\n\\nThankfully, Azure Static Web Apps makes this fairly painless. Let\'s see how.\\n\\n\\n## What We\'ll Cover\\n * How do we secure a SWA?\\n * Managed authentication\\n * Custom authentication\\n * Managing user roles\\n * Role-based authorization\\n * Accessing user information\\n\\n![](../static/img/series/05-banner.png)\\n\\n\\n## Securing SWA\\n\\nWhat does it mean to _secure_ a Static Web App? It\'s three things:\\n * **Knowing User Identity** - Having a way to determine the identity of the user using an authentication service or provider.\\n * **Knowing User Roles** - Understanding what persona the user is taking on when (using the application), and customizing the experience accordingly.\\n * **Managing User Access** - Making sure the authenticaton information is seamlessly accessible to all SWA components, allowing them to enforce rules that allow only authorized users or roles to access resources.\\n\\nLet\'s dive into the three concepts that tackle these needs: **Authentication**, **Role Assignment** and **Role-Based Authorization**.\\n\\n## Managed Auth\\n\\nAzure Static Web Apps comes with a default **streamlined authentication experience** that supports:\\n * _pre-configured providers_: Twitter, GitHub, Azure Active Directory\\n * _pre-assigned roles_: anonymous (guest) or authenticated (on login)\\n * _customizable rules_: defined for routes, in `staticwebapps.config.json`\\n\\nAll pre-configured providers are active by default, with their own pre-defined API endpoints for [Login](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations#login), and a shared API endpoint for [Logout](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations#logout). \\n * Want to block a specific pre-configured provider? Just [add a blocking rule](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations#block-an-authentication-provider) to their login route to ensure no user is allowed access to it.\\n * Want to send users to custom pages after successful or failed login attempts? Use [query parameters and route rules](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations#post-login-redirect) to make this work.\\n\\nThis is the default _managed authentication_ experience. \\n\\n## Custom Auth \\n\\nBut what if you want more flexibility with the registration process (used by a pre-configured provider) or want to add a new one (custom provider)?\\nThis is where _custom authentication_ options come in, allowing you to override the defaults.\\n\\nYou can [configure one or more custom providers](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=aad#configure-a-custom-identity-provider) for this purpose. Azure Static Web Apps has **[built-in support](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=apple#configure-a-custom-identity-provider) for custom authentication using: _Apple, Facebook, Google, Twitter, GitHub - and AAD_!** You can also configure custom providers that support [OpenID Connect](https://openid.net/connect/) standard. \\n\\nBy configuring at least one custom provider, you are effectively disabling pre-configured provider options. To configure custom providers, add config information to the `auth` section of the `staticwebapps.config.json` file. This is also a good place to use _Application Settings_ (environment variables) to store potentially sensitive configuration data in a privacy-preserving way.\\n\\nAzure Static Web Apps makes custom registrations easy by providing standard route patterns for [_Login_, _Logout_ and _User Profile_](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=apple#authentication-callbacks) requests, as well as [redirect URLs](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=apple#authentication-callbacks) for authentication callbacks (from the custom provider) on login/logout.\\n\\n## User Roles\\n\\nThere are three key concepts you need to know in this context:\\n * Every Static Web Apps user has one or more roles assigned to them.\\n * There are 2 built-in roles (\\"anonymous\\" and \\"authenticated\\")\\n * Define custom roles & assign users **[by invitation](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations#add-a-user-to-a-role)** or **[by-function](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=function#add-a-user-to-a-role)**.\\n\\nLet\'s review these quickly. \\n\\n * All users accessing a Static Web App are in an _anonymous_ role (guest) until authenticated by a pre-configured or custom provider.\\n * Once authenticated, they have an _authenticated_ role but can now be _assigned custom roles_ by invitation (proactive) or by function (reactive)\\n * **Proactive invitations** can be configured and sent from the Azure Portal, using provider-specific email addresses for the user. Users now click on the invite link to login with that custom role assigned automatically.\\n * **Reactive functions** defer assignment to post-login, using an Azure Function that dynamically returns an assigned role (or roles) to the user on being given the authenticated user details.\\n\\nThe latter approach offers more flexibility, allowing you to use the function handler to invoke another service (like [Microsoft Graph](https://developer.microsoft.com/graph)) to make the role-assignment decision for you. Read [**Role Management**](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=function#role-management) for more details - including steps to update role assignments or remove users from a role.\\n\\n\\n## Role-Based Auth\\n\\nOnce the user has been assigned a role, _managing user access_ based on that assignment becomes easy using the built-in support for [routing rules](https://docs.microsoft.com/en-us/azure/static-web-apps/configuration#routes) based on the **allowedRoles** property attached to each `route`. For example, the following configuration setting (in `staticwebapps.config.json`) would restrict access to all routes that start with `/profile*` to _only authenticated users_.\\n)\\n\\n```\\n{\\n  \\"route\\": \\"/profile*\\",\\n  \\"allowedRoles\\": [\\"authenticated\\"]\\n}\\n```\\n\\nRead more about [securing routes with rules](https://docs.microsoft.com/en-us/azure/static-web-apps/configuration#securing-routes-with-roles) to understand various usage scenarios and configuration settings to enforce them.\\n\\n## Access User Info\\n\\nOne of the benefits of Azure Static Web Apps\' seamless integration of application and API capabilities is that [authenticated user information can be accessed transparently](https://docs.microsoft.com/en-us/azure/static-web-apps/user-information?tabs=javascript) in two ways:\\n * Using a [direct access endpoint](https://docs.microsoft.com/en-us/azure/static-web-apps/user-information?tabs=javascript#direct-access-endpoint) at `/.auth/me` that is automatically provisioned with the user\'s information when authenticated.\\n * Using [API functions](https://docs.microsoft.com/en-us/azure/static-web-apps/user-information?tabs=javascript#api-functions) with a `fetch` call to the `/api/xxx` endpoint, where `xxx` is a named function you implement to return user information. \\n\\n\\n---\\n\\n## How-Tos: Watch It!\\n\\nPrefer a Video Walkthrough to understand the process? We have you covered with the [Azure Tips And Tricks: Static Web Apps](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/) series. Check out the following videos:\\n\\n<iframe  width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-integrate-authentication-in-azure-static-web-apps-8-of-16--azure-tips-and-tricks-static-web-a\\"></iframe>\\n\\n<iframe  width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-configure-authorization-in-azure-static-web-apps-9-of-16--azure-tips-and-tricks-static-web-ap\\"></iframe>\\n\\n---\\n\\n## Exercise: Try it!\\n\\nOne popular feature that modern web apps often support is the ability to assign a custom role to an authenticated user (based on some identifiable context) and then regulate their access to various routes or features in the application based on that assigned role. **How can we make that happen in Static Web Apps?**\\n\\nThere\'s a [**tutorial**](https://docs.microsoft.com/en-us/azure/static-web-apps/assign-roles-microsoft-graph) that teaches you how! \\n * Authenticate the user using the managed [Azure Active Directory](https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis) API endpoint.\\n * Query [Microsoft Graph](https://developer.microsoft.com/graph) to determine their Active Directory group membership.\\n * Use that membership to assign them a custom role.\\n\\n**Challenge Yourself!** \\n\\nUpdate the application behavior in the `staticwebapp.config.json` file to restrict user access to specific routes by specifying `allowedRoles` for those routes. Test what happens when the custom role above is added, and then removed, from the collection of allowedRoles.\\n\\n---\\n\\n## Useful Resources\\n\\n1. [Authentication and Authorization in SWA](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization?tabs=invitations)\\n2. [Accessing authenticated user information in SWA](https://docs.microsoft.com/en-us/azure/static-web-apps/user-information?tabs=javascript)\\n3. [Implement custom authentication in SWA](https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=aad)\\n4. Tutorial: [Assign custom roles using Microsoft Graph and AAD](https://docs.microsoft.com/en-us/azure/static-web-apps/assign-roles-microsoft-graph)\\n5. Video Series: [Azure Tips And Tricks - Static Web Apps](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/)"},{"id":"configuring-swa","metadata":{"permalink":"/30DaysOfSWA/blog/configuring-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-05.md","source":"@site/blog/2021-05-05.md","title":"#04: Configuring SWA","description":"Welcome to Week 1, Day 4 of #30DaysOfSWA!!","date":"2021-05-05T00:00:00.000Z","formattedDate":"May 5, 2021","tags":[{"label":"swa","permalink":"/30DaysOfSWA/blog/tags/swa"},{"label":"30days","permalink":"/30DaysOfSWA/blog/tags/30-days"},{"label":"core-concepts","permalink":"/30DaysOfSWA/blog/tags/core-concepts"}],"readingTime":5.395,"truncated":false,"authors":[{"name":"Joseph Lin","title":"Software Engineer @Microsoft","url":"https://github.com/joslinmicrosoft","imageURL":"https://github.com/joslinmicrosoft.png","key":"joseph"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"configuring-swa","title":"#04: Configuring SWA","authors":["joseph","nitya"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#05: Securing SWA","permalink":"/30DaysOfSWA/blog/securing-swa"},"nextItem":{"title":"#03: API-Enabling SWA","permalink":"/30DaysOfSWA/blog/api-enabling-swa"}},"content":"Welcome to `Week 1, Day 4` of **#30DaysOfSWA**!! \\n\\nIn the past two days we\'ve seen how the Azure Static Web Apps services sets up default CI/CD actions (to automate build/deploy workflows) and transparently configures application to access the API with minimal input from us during setup. But what if we want to _customize_ the build process or application behavior? That\'s where knowing SWA _configuration options_ can help.\\n\\n\\n## What We\'ll Cover\\n * Configuration: Concepts & Files\\n * Customize: Application Behavior\\n * Customize: Build Process\\n * Customize: Environment Settings\\n * **Exercise:** Explore an open source app to see these in action!\\n * **Resource(s):** Links for deeper-dives into the topic\\n\\n![](../static/img/series/04-banner.png)\\n\\n\\n## Concepts & Files\\n\\nWhen we think of configuring the Static Web App, we have three potential targets we can customize:\\n * **Application**: Use the `staticwebapp.config.json` file (located in the folder specified for `app_location`) to define rules and properties that customize application behaviors like routing, authentication, networking and more. \\n * **Build**: Static Web Apps automates your build/deploy workflow using GitHub Actions or Azure Pipelines, configurable via the relevant YAML files. For example, this would be the `.github/workflows/azure-static-web-apps-xxx.yml` file in your repo, for GitHub Actions.\\n * **Environment:** Sometimes configuration values may only be known at runtime - e.g., database connection strings. By using environment variables, you can update the _values_ at runtime without having to change the application code that uses them. Environment variables can be set in the Azure Portal (for production) or in _local settings files_ (for development.)\\n\\nLet\'s take a quick look at what each of these provides, along with resource links for deeper dives that you can explore on your own. Check out the [example scenarios](https://docs.microsoft.com/azure/static-web-apps/configuration-overview#example-scenarios) to get a better understanding of which file (or concept) you need to focus on, for specific scenarios.\\n\\n## Config: Application\\n\\nApplication behavior is configured using the _staticwebapp.config.json_ file located in the folder defined by `app_location`. Here are a _subset_ of the properties and their purpose:\\n\\n * [**\\"routes\\"**](https://docs.microsoft.com/azure/static-web-apps/configuration#routes) - are an array of \\"route\\" objects that can each be associated with access rules (\\"allowedRoles\\"), actions (\\"redirect\\", \\"rewrite\\") - and request (\\"methods\\") and response (\\"headers\\",\\"statusCode\\") properties.\\n * [**\\"navigationFallback\\"**](https://docs.microsoft.com/azure/static-web-apps/configuration#fallback-routes) supports applications that rely on client-side routing by providing a server-side fallback route which serves the required page, with filters to control usage.\\n * [**\\"responseOverrides\\"**](https://docs.microsoft.com/azure/static-web-apps/configuration#response-overrides) allows you to return a custom response instead of default HTTP error codes, for more user-friendly experiences.\\n * [**\\"platform\\"**](https://docs.microsoft.com/azure/static-web-apps/configuration#platform) sets platform-specific configurations like _apiRuntime_ for API language runtime version.\\n\\n There are also configuration properties for authentication, networking, global headers, custom MIME types and more. Check out the [documentation](https://docs.microsoft.com/azure/static-web-apps/configuration#file-location) for the complete list and scan this **example** [staticwebapp.config.json](https://docs.microsoft.com/azure/static-web-apps/configuration#example-configuration-file) to understand how these are defined.\\n\\n```json\\n{\\n  \\"routes\\": [\\n    {\\n      \\"route\\": \\"/profile*\\",\\n      \\"allowedRoles\\": [\\"authenticated\\"]\\n    },\\n    {\\n      \\"route\\": \\"/admin/index.html\\",\\n      \\"allowedRoles\\": [\\"administrator\\"]\\n    },\\n    {\\n      \\"route\\": \\"/images/*\\",\\n      \\"headers\\": {\\n        \\"cache-control\\": \\"must-revalidate, max-age=15770000\\"\\n      }\\n    },\\n    {\\n      \\"route\\": \\"/api/*\\",\\n      \\"methods\\": [\\"GET\\"],\\n      \\"allowedRoles\\": [\\"registeredusers\\"]\\n    },\\n    {\\n      \\"route\\": \\"/api/*\\",\\n      \\"methods\\": [\\"PUT\\", \\"POST\\", \\"PATCH\\", \\"DELETE\\"],\\n      \\"allowedRoles\\": [\\"administrator\\"]\\n    },\\n    {\\n      \\"route\\": \\"/api/*\\",\\n      \\"allowedRoles\\": [\\"authenticated\\"]\\n    },\\n    {\\n      \\"route\\": \\"/customers/contoso*\\",\\n      \\"allowedRoles\\": [\\"administrator\\", \\"customers_contoso\\"]\\n    },\\n    {\\n      \\"route\\": \\"/login\\",\\n      \\"rewrite\\": \\"/.auth/login/github\\"\\n    },\\n    {\\n      \\"route\\": \\"/.auth/login/twitter\\",\\n      \\"statusCode\\": 404\\n    },\\n    {\\n      \\"route\\": \\"/logout\\",\\n      \\"redirect\\": \\"/.auth/logout\\"\\n    },\\n    {\\n      \\"route\\": \\"/calendar*\\",\\n      \\"rewrite\\": \\"/calendar.html\\"\\n    },\\n    {\\n      \\"route\\": \\"/specials\\",\\n      \\"redirect\\": \\"/deals\\",\\n      \\"statusCode\\": 301\\n    }\\n  ],\\n  \\"navigationFallback\\": {\\n    \\"rewrite\\": \\"index.html\\",\\n    \\"exclude\\": [\\"/images/*.{png,jpg,gif}\\", \\"/css/*\\"]\\n  },\\n  \\"responseOverrides\\": {\\n    \\"400\\": {\\n      \\"rewrite\\": \\"/invalid-invitation-error.html\\"\\n    },\\n    \\"401\\": {\\n      \\"redirect\\": \\"/login\\",\\n      \\"statusCode\\": 302\\n    },\\n    \\"403\\": {\\n      \\"rewrite\\": \\"/custom-forbidden-page.html\\"\\n    },\\n    \\"404\\": {\\n      \\"rewrite\\": \\"/404.html\\"\\n    }\\n  },\\n  \\"globalHeaders\\": {\\n    \\"content-security-policy\\": \\"default-src https: \'unsafe-eval\' \'unsafe-inline\'; object-src \'none\'\\"\\n  },\\n  \\"mimeTypes\\": {\\n    \\".json\\": \\"text/json\\"\\n  }\\n}\\n```\\n\\n\\n\\n\\n## Config: Build\\n\\nAzure Static Web Apps build workflows are powered either by GitHub Actions (in a file named something like `.github/workflows/azure-static-web-apps-xxx.yml`) or by Azure Pipelines (using the `azure-pipelines.yml` file). \\n\\nThe main settings you need to be familiar with are:\\n * `app_location` - folder for application source code\\n * `api_location` - folder with API functions source code\\n * `output_location` - where are build files generated\\n * `app_build_command` - custom app build command (for Node.js apps)\\n * `api_build_command` - custom api build command (for Node.js apps)\\n * `skip_app_build` - flag to skip app build step (if true)\\n * `skip_api_build` - flag to skip api build step (if true)\\n * `build_timeout_in_minutes` - defaults to 15 (customize to extend)\\n\\nRead [**this document**](https://docs.microsoft.com/azure/static-web-apps/build-configuration?tabs=azure-devops#environment-variables) to learn how each of those properties can be customized and used effectively.\\n\\n\\n## Config: Environment\\n\\nYour application behavior configuration values may change based on the runtime context. By setting values in _environment variables_, you can decouple definition of values from their usage within application code. We refer to these environment variables as [**application settings**](https://docs.microsoft.com/azure/static-web-apps/application-settings) which are copied to both staging and production environments. \\n\\nBut where are they _defined?_ That depends on the development stage:\\n\\n * **[Local Development:](https://docs.microsoft.com/azure/static-web-apps/application-settings#configure-api-application-settings-for-local-development)** When developing your app, you can use a local settings file that is not tracked by GitHub so sensitive information is not leaked. **Azure Functions** uses the `api/local.settings.json` file to store relevant app settings - and watch out for a special 2-part series of posts in Week 3 where we cover the local settings file used by the [**Static Web Apps CLI**](https://github.com/Azure/static-web-apps-cli) for a simpler, unified local development experience.\\n * [**Staging/Production:**](https://docs.microsoft.com/azure/static-web-apps/application-settings#configure-application-settings) You can define and configure these application settings in the [Azure Portal](https://portal.azure.com/) via the browser, or by using the [Azure CLI](https://docs.microsoft.com/cli/azure/) (see the [`az staticwebapp appsettings`](https://docs.microsoft.com/cli/azure/staticwebapp/appsettings?view=azure-cli-latest) documentation), to create and manage your application settings. These will be encrypted, and copied to staging and production environments.\\n\\nLearn more about how you can configure application settings in [the documentation](https://docs.microsoft.com/azure/static-web-apps/application-settings#configure-application-settings).\\n\\n## How-Tos: Watch It!\\n\\nWant to see how application behavior configuration in action? Check out these two videos from the [Azure Static Web Apps: Tips & Tricks](https://docs.microsoft.com/shows/azure-tips-and-tricks-static-web-apps/) series.\\n\\n<iframe width=\\"560\\" height=\\"315\\" frameborder=\\"0\\"  src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-configure-routing-in-azure-static-web-apps-6-of-16--azure-tips-and-tricks-static-web-apps\\"></iframe>\\n\\n<iframe width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-configure-authorization-in-azure-static-web-apps-9-of-16--azure-tips-and-tricks-static-web-ap\\" ></iframe>\\n\\n\\n## Exercise: Explore It!\\n\\nThe [SWA Bank](https://github.com/sinedied/swa-bank) is a Static Web App application developed as a solution for one of the projects in the [Web Dev For Beginners](https://github.com/microsoft/Web-Dev-For-Beginners) curriculum. \\n\\nIt was recently updated to reflect best practices. Explore the configuration files in the project - and see if you understand how they customize the application behavior and build process. **Then revisit it in week 3 when we discuss developer tools** to understand how local settings are configured and used with the Static Web Apps CLI (`swa`) tool for local development \\n\\n## Useful Resources\\n\\n 1. [Configuration Overview](https://docs.microsoft.com/azure/static-web-apps/configuration-overview)\\n 2. [Application Configuration: staticwebapp.config.json](https://docs.microsoft.com/azure/static-web-apps/configuration)\\n 3. [Build Configuration: Actions or Pipelines YAML](https://docs.microsoft.com/azure/static-web-apps/build-configuration?tabs=github-actions)\\n 4. [Environment Configurations: For Backends](https://docs.microsoft.com//azure/static-web-apps/application-settings)\\n 5. [Configure Application Settings](https://docs.microsoft.com/azure/static-web-apps/application-settings)\\n 6. [SWA Bank Repo](https://github.com/sinedied/swa-bank) - a Static Web Apps project to explore and learn from."},{"id":"api-enabling-swa","metadata":{"permalink":"/30DaysOfSWA/blog/api-enabling-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-04.md","source":"@site/blog/2021-05-04.md","title":"#03: API-Enabling SWA","description":"Welcome to Week 1, Day 3 of #30DaysOfSWA!!","date":"2021-05-04T00:00:00.000Z","formattedDate":"May 4, 2021","tags":[{"label":"swa","permalink":"/30DaysOfSWA/blog/tags/swa"},{"label":"30days","permalink":"/30DaysOfSWA/blog/tags/30-days"},{"label":"core-concepts","permalink":"/30DaysOfSWA/blog/tags/core-concepts"}],"readingTime":5.245,"truncated":false,"authors":[{"name":"Anthony Chu","title":"Senior PM @Microsoft","url":"https://github.com/anthonychu","imageURL":"https://github.com/anthonychu.png","key":"anthony"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"api-enabling-swa","title":"#03: API-Enabling SWA","authors":["anthony","nitya"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#04: Configuring SWA","permalink":"/30DaysOfSWA/blog/configuring-swa"},"nextItem":{"title":"#02: Building SWA","permalink":"/30DaysOfSWA/blog/building-swa"}},"content":"Welcome to `Week 1, Day 3` of **#30DaysOfSWA**!! \\n\\nYesterday, we built and deployed our first Static Web App (using a vanillaJS template) from a GitHub repo. We used the VS Code Extension and, with just a few clicks, it setup automated GitHub Actions (CI/CD) workflows for us transparently. Today - we learn how we can add **serverless API endpoints** to our application using Azure Functions, helping us scale APIs more effectively with demand.\\n\\n## What We\'ll Cover\\n * Why go Serverless with SWA?\\n * Add API with Azure Functions\\n * Quickstart: Use Managed Functions\\n * Bring Your Own Functions\\n * **Example:** Bring [Azure-SWAG](https://github.com/sinedied/azure-swag/) to May 4!\\n * **Exercise:** Try it out yourself!\\n\\n\\n![](../static/img/series/03-banner.png)\\n\\n## Why Go Serverless?\\n\\nWhen [Introducing SWA](2021-05-02.md), we talked about how static web apps are architected to separate **static content assets** and **dynamic API endpoints** into separate components that can be served and scaled independently.\\n\\nIn yesterday\'s post we looked at a basic Static Web App with just content assets (no API). Deploying it with SWA helped us take advantage of Azure\'s globally-distributed content servers for fast and cost-effective access. Today, we want to add an API endpoint to support dynamic requests from clients. So what does serverless mean, and how do we implement serverless API endpoints?\\n\\nIn this context, [Serverless](https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/serverless/web-app) is about using an event-driven architecture to allocate our compute resources on-demand. So, our API server will scale as demand grows, but be cost-effective when demand drops.\\n\\n[Azure Functions](https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview) makes implementing your serverless solutions easier. Event handling is implemented with _functions_ (code blocks) that run on compute resources that are dynamically-allocated. Resources can spin up as API requests grow, and spin down as demand drops. [**Try this learning path**](https://docs.microsoft.com/en-us/learn/paths/create-serverless-applications/) for a deep-dive into using Azure Functions.\\n\\n## Use Azure Functions\\n\\nStatic Web Apps and Azure Functions are integrated seamlessly, enabling key features with respect to security (user data) and routing integrations:\\n\\n * **[User data access](https://docs.microsoft.com/en-us/azure/static-web-apps/user-information?tabs=javascript#api-functions)** - API functions can directly access user authenticaton and role-based authorization data when handling requests.\\n * **[API Route access](https://docs.microsoft.com/en-us/azure/static-web-apps/configuration?#routes)** - the application can access the `/api` route securely, without requiring custom CORS rules.\\n \\nBut it gets better. Your SWA can be configured for Azure Functions in two ways:\\n \\n* **Managed Functions** - where the Azure Static Web Apps service configures and manages your Azure Functions deployment.\\n* **Bring Your Own Functions** - where you use a pre-existing Azure Functions application and manage the deployment yourself.\\n\\nThe Free plan supports only the Managed Functions option. It has [some limitations](https://docs.microsoft.com/en-us/azure/static-web-apps/apis) - e.g., supports only HTTP triggers and lacks support for [Durable Functions](https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview) etc. - but is quick to setup and seamless to use. We\'ll explore this option today but look for a post in Week 4 that will discuss the _[Bring Your Own Functions](https://docs.microsoft.com/en-us/azure/static-web-apps/functions-bring-your-own)_ approach in detail.\\n\\n\\n## Adding the API\\n\\nWant to get some hands-on experience with adding an API endpoint to your Static Web Apps deployment? Check out this [Quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/add-api?tabs=vanilla-javascript) tutorial that builds on the vanilla-JS application you deployed previously. The key steps are:\\n\\n**1. Setup Azure Functions for SWA**\\n * Install the [Azure Functions Extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions) for VS Code.\\n * Open your application root folder (\\"/\\") - create an \\"api\\" subfolder\\n * Select \\"Azure Static Web Apps: Create HTTP Function\\" through Command Palette or select the lightning bolt option in Azure extension menu.\\n * Enter required configuration information (language=\\"JavaScript\\", function name=\\"message\\"), and confirm.\\n\\n_Sit back and wait till the process completes setup._ This populates the `/api` directory with configuration files (*.json) in the root folder, and a `/api/message` subfolder that contains 2 files:\\n\\n * _function.json_ - defines this function\'s trigger, bindings and [other settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference?tabs=blob#function-code).\\n * _index.js_ - implements an async function (accessed at `/api/message`)\\n\\n**2. Update the index.js file to implement your function** - making sure it returns a desired response given the incoming API request and context (input parameters).\\n\\n**3. Update your application code to invoke the API** - you can do this by calling `fetch(\'/api/message\')` directly - the seamless Azure Functions integration ensures that the API routing happens automagically.\\n\\n**4. Test the integration locally with the SWA CLI**.\\nThe Azure Static Web Apps CLI (SWA CLI) is a tool to support local development for Static Web Apps by emulating required services where needed. Follow [these steps](https://docs.microsoft.com/en-us/azure/static-web-apps/add-api?tabs=vanilla-javascript#run-the-frontend-and-api-locally) to install the tools and run/test your app and API together in your local development environment. Look for a detailed 2-part post in Week 3 (\\"Developer Tools\\") where we cover the SWA CLI capabilities, configuration, and usage, in more detail.\\n\\n\\n**5. Update the GitHub Actions workflow with API location**\\n\\nThis is the key step to make sure the Azure Static Web Apps deployment workflow also picks up the new API function.\\n * Open the default GitHub Actions workflow file for your SWA and update the `api_location` property to \\"api\\".\\n * Save and commit changes to trigger rebuild and deploy.\\n\\n\\n**Want to see API in action?** Scroll down to the `Exercise` section where we walk through a quick activity you can do to build and deploy a Static Web App with GitHub (SWAG) _and celebrate #StarWars Day_ in the process!\\n\\n**Prefer a video tutorial?** Check out this [Azure Static Web Apps: Tips & Tricks](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/) that walks through the process from a _react-starter_ template, and showcases the use of remote [development container](https://code.visualstudio.com/docs/remote/create-dev-container) for Visual Studio Code that further streamlines your development experience.\\n\\n<iframe width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-add-an-api-to-your-azure-static-web-app-7-of-16--azure-tips-and-tricks-static-web-apps\\"></iframe>\\n\\n\\n## Exercise: SWAG!\\n\\nToday is May 4 - Star Wars Day! Wouldn\'t it be nice if we could celebrate this with our favorite Star Wars quotes? Thankfully, [my colleague Yohan](https://www.twitter.com/sinedied) has a great [Azure-SWAG](https://dev.to/sinedied/the-easy-way-to-serverless-web-apps-and-apis-with-azure-swag-2heb) template that combines images from [Unsplash](https://unsplash.com) with a pre-defined set of quotes in an API function (\\"/api/quote\\") \\n\\n**So I created a version for my [May 4 homage](ttps://github.com/nitya/may4-swag)**. Here\'s what that looks like when deployed. Refresh the SWA to get a new image and quote each time (from the API).\\n\\n![May The Fourth Homage App](../static/img/series/03-may4.png)\\n\\n * See the [Code Repository](https://github.com/nitya/may4-swag)\\n * See the [Deployed SWA](https://agreeable-tree-0a216f70f.1.azurestaticapps.net/)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nYour assignment: follow [these steps](https://github.com/nitya/may4-swag#steps) to replicate my project, then explore the [index.js](https://github.com/nitya/may4-swag/blob/main/api/quote/index.js) code to see how the `/api/quote` function is implemented and review the [`app.js`](https://github.com/nitya/may4-swag/blob/main/app.js) code to see how that API is invoked within the application.\\n\\n\\n## Useful Resources\\n- [API Support in SWA](https://docs.microsoft.com/en-us/azure/static-web-apps/apis)\\n- [Add API with Managed Functions](https://docs.microsoft.com/en-us/azure/static-web-apps/add-api?tabs=vanilla-javascript)\\n- [Bring Your Own Functions](https://docs.microsoft.com/en-us/azure/static-web-apps/functions-bring-your-own)\\n- [May4-Swag Demo](https://github.com/nitya/may4-swag)"},{"id":"building-swa","metadata":{"permalink":"/30DaysOfSWA/blog/building-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-03.md","source":"@site/blog/2021-05-03.md","title":"#02: Building SWA","description":"Welcome to Week 1, Day 2 of #30DaysOfSWA!!","date":"2021-05-03T00:00:00.000Z","formattedDate":"May 3, 2021","tags":[{"label":"swa","permalink":"/30DaysOfSWA/blog/tags/swa"},{"label":"30days","permalink":"/30DaysOfSWA/blog/tags/30-days"},{"label":"core-concepts","permalink":"/30DaysOfSWA/blog/tags/core-concepts"}],"readingTime":6.025,"truncated":false,"authors":[{"name":"Glaucia Llemos","title":"Cloud Advocate @Microsoft","url":"https://github.com/glaucia86","imageURL":"https://github.com/glaucia86.png","key":"glaucia"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"building-swa","title":"#02: Building SWA","authors":["glaucia","nitya"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#03: API-Enabling SWA","permalink":"/30DaysOfSWA/blog/api-enabling-swa"},"nextItem":{"title":"#01: Introducing SWA","permalink":"/30DaysOfSWA/blog/introducing-swa"}},"content":"Welcome to `Week 1, Day 2` of **#30DaysOfSWA**!! \\n\\nYesterday we got a quick introduction to Azure Static Web Apps (what it is, how it\'s architected, and 10 features that make it useful to modern web developers). Today, it\'s time to dive to dive into _Building Static Web Apps_.\\n\\n\\n## What We\'ll Cover\\n * How can I get started with SWA?\\n * Using SWA with personal and production projects.\\n * Building & Deploying your first SWA\\n * **Tutorial** Let\'s Build a Classic Movie Crawler!\\n * **Exercise** Your turn! And `#MayThe4thBeWithYou`\\n * **Resources:** [Static Web Apps Quickstarts](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript)\\n\\n![](../static/img/series/02-banner.png)\\n\\n## 1. Getting Started \\n\\nThe Azure Static Web Apps service makes it easy to publish your modern web application directly from its codebase. Let\'s walk through that process for a basic web application (HTML, CSS, JS) first, to understand the development workflow and configuration options.\\n\\n### 1.1 Requirements\\n\\nTo do this quickstart, you\'ll need \\n * a [GitHub account](https://github.com/) - you can [signup](https://github.com/signup) for a free one if needed.\\n * an [Azure account](https://portal.azure.com) - you can [signup](https://azure.microsoft.com/en-us/free/) for a free account to start.\\n * [Visual Studio Code](https://code.visualstudio.com/) and [this VS Code Extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) - if you favor IDEs.\\n\\nThis approach assumes you favor using an IDE for development, and want to streamline build/deploy into that workflow. I\'m a fan of Visual Studio Code so I\'ll use this approach. If you prefer to use the command line, or a browser, we have you covered! \\n * [Quickstart: With Azure CLI](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-cli?tabs=vanilla-javascript) - for commandline-driven workflow.\\n * [Quickstart: With Azure Portal](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-portal?tabs=vanilla-javascript&pivots=github) - for browser-driven workflow.\\n\\n### 1.2 Final Outcome\\n\\nThe goal is to take this basic HTML/CSS/JS application and configure it for automatic build/deploy to Azure Static Web Apps. We\'ll be using this **[official quickstart](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript)** which comes with a  [vanilla-JS application starter template](https://github.com/staticwebdev/vanilla-basic/generate) that provides our base application. Feel free to be adventurous and follow these steps with your own vanillaJS codebase.\\n\\nWe\'ll clone that starter first - making **GitHub** our default code-hosting provider. Azure Static Web Apps has flexible deployment options so look at tutorials for **[BitBucket](https://github.com/staticwebdev/vanilla-basic/generate), [GitLab](https://docs.microsoft.com/en-us/azure/static-web-apps/gitlab?tabs=vanilla-javascript) or [Azure DevOps](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-portal?tabs=vanilla-javascript)** if preferred. Watch for the _Deploying SWA_ post later this week for more details.\\n\\n![VanillaJS Quickstart outcome page](../static/img/series/02-vanillajs-start.png)\\n\\nSo what does that vanilla-JS starter app do? Not much - it\'s just a simple title on a blank webpage as shown above. Here\'s what you\'ll end up with when done:\\n\\n - **Hosted SWA**: See the [live-deployment here](https://witty-desert-019fd800f.1.azurestaticapps.net/) \\n - **Codebase**: See the [code source repo here](https://github.com/fearlessly-dev/my-first-swa)\\n\\n\\nReady to do this? Let\'s go!\\n\\n### 1.3 Build Process\\n\\nThe process is captured in [this quickstart document](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript) and has the following steps:\\n \\n * [**Click**](https://github.com/login?return_to=/staticwebdev/vanilla-basic/generate) to generate your vanilla-js app from the template.\\n * [**Clone**](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript#clone-the-repository) the repo to your local machine. Open in Visual Studio Code.\\n * [**Install**](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript#install-azure-static-web-apps-extension) the Azure Static Web Apps extension in VS Code (if not present)\\n * [**Select Azure**](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript#create-a-static-web-app) in the Activity Bar to view Azure Extensions window. You will be prompted to log into Azure and GitHub during this workflow if needed.\\n    1. Select the Static Web Apps section and click \\"+\\" to start SWA setup\\n    2. Select the relevant Azure subscription to use\\n    3. Select the region to deploy to (close to you)\\n    4. Select the \\"Custom\\" preset - use `/src` as app location, leave build empty\\n    5. Press Enter. Watch for a pop-up notification of build status.\\n \\nOnce deployment completes (you should see the success notification), visit the Azure Extensions window again.Look for the project in the Static Web Apps section and right-click for options. Here are three key ones to know:\\n 1. `Browse Site` - click to see the [live-deployed site](https://witty-desert-019fd800f.1.azurestaticapps.net/)\\n 2. `Edit Workflow` - click to see automated [GitHub Actions](https://github.com/fearlessly-dev/my-first-swa/blob/main/.github/workflows/azure-static-web-apps-witty-desert-019fd800f.yml) setup for the SWA.\\n 3. `Open in Portal` - click to manage the SWA in the Azure Portal.\\n\\n**That\'s it!! You just deployed your first Static Web App with just a few clicks and configuration inputs!** \ud83c\udf89\\n\\n\\n### 1.4 Let\'s Unpack\\n\\nSo what happened under the hood? \\n\\nIf you look at your [codebase](https://github.com/fearlessly-dev/my-first-swa) you\'ll see **one key change** - the Azure SWA service [sets up the GitHub Actions workflow](https://github.com/fearlessly-dev/my-first-swa/commit/1441e25149f1573a7010682e0a431263fbd89cb6) for you, directly in the repo using your GitHub credentials. No manual steps needed from you!\\n\\nThe workflow automates the build/deploy process on both code commit (`push`) and contribution (`pull request`) events. So when you make changes to your application code, it triggers the workflow to automatically rebuild and deploy the updated Static Web App. \ud83d\ude4c\ud83c\udffd\\n\\n### 1.5 Video Tutorial\\n\\nWant to see a video walkthrough of the process? Check out this 2-minute [Azure Static Web Apps: Tips & Tricks](https://docs.microsoft.com/en-us/shows/azure-tips-and-tricks-static-web-apps/) video from 2021. It features a different vanilla-JS application but follows the same \\"Quickstart with Visual Studio Code\\" steps so you can see them in action! \\n\\n<iframe width=\\"560\\" height=\\"315\\" frameborder=\\"0\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=how-to-deploy-your-first-azure-static-web-apps-3-of-16--azure-tips-and-tricks-static-web-apps\\"></iframe>\\n\\n## 2. \\"There is No Try!\\"\\n\\nYou realize today is May 3rd, right? That means tomorrow is May 4 - and what better way to celebrate our favorite movie call-to-action (`MayTheFourthBeWithYou`) than to pay homage with our own custom crafted movie banner sharing our origin story. \\n\\n![Build a crawler with Azure Static Web Apps](../static/img/series/02-banner-glaucia.png)\\n\\nTry out this 3-part tutorial to take the basic HTML/CSS/JS application to the next level - and recreate the iconic introduction from the classic [Star Wars](https://en.wikipedia.org/wiki/Star_Wars) franchise. Just do the thing! \\n\\n 1. [Part 1: Create basic page and style it with HTML/CSS](https://dev.to/azure/building-star-wars-crawler-with-azure-static-web-apps-part-1-3o39) \\n 2. [Part 2: Bring moving banner to life with JS](https://dev.to/azure/building-star-wars-crawler-with-azure-static-web-apps-part-2-3hc0)\\n 3. [Part 3: Use Visual Studio Code to deploy to Static Web Apps](https://dev.to/azure/building-star-wars-crawler-with-azure-static-web-apps-part-3-41ip)\\n\\n\\n**Please Note:** The tutorial is meant only to illustrate the creation of the banner with CSS/JS/HTML and celebrate an iconic movie on an iconic date! The movie logo, music and other iconic elements remain the property of relevant copyright holders and should not be used without permission. \\n\\n## 3. Let\'s Talk Plans!\\n\\nThe Azure Static Web Apps service comes with [two plans](https://docs.microsoft.com/en-us/azure/static-web-apps/plans) - a **Free** plan that is perfect for Personal projects, and a **Standard** (paid) plan that is more appropriate for apps deployed in production. Check out the [Features Comparison](https://docs.microsoft.com/en-us/azure/static-web-apps/plans#features) to judge what plan is best for you.\\n\\nMy personal experience is that, as an individual developer, the free tier is sufficiently generous to explore ideas and host prototypes (for real-world users) or demos (for validating ideas). The free tier also comes with Managed Functions support (to integrate a serverless API capability) out of the box. You will need the Standard plan if you want to \\"Bring your own functions\\" instead. For the most part, you should be able to try out all the Exercises in #30DaysOfSWA using the Free tier.\\n\\n\\n## 4: Exercise\\n\\nIf you followed along with the quickstart, you should have setup and deployed your first Azure Static Web App using a vanilla-JS starter. Now, time to challenge yourself by trying out one (or both) of these options:\\n\\n * **Complete the other quickstart tutorials** - using [Azure CLI](https://docs.microsoft.com/en-us/azure/static-web-apps/get-started-cli?tabs=vanilla-javascript) and [Azure Portal](https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript) - to get a sense of how the workflows differ. And join the [#SWAanniversary](2021-04-30.md) event to learn more about [SWA CLI](https://docs.microsoft.com/en-us/azure/static-web-apps/local-development) for local development.\\n * **Build your own movie crawler** - follow Glaucia\'s tutorial to have the default banner running on Azure Static Web Apps - then customize the words to suit _your origin story_ and share it on May 4th ([StarWars Day](https://www.starwars.com/star-wars-day)) - and `MayThe4thBeWithYou!`."},{"id":"introducing-swa","metadata":{"permalink":"/30DaysOfSWA/blog/introducing-swa","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-02.md","source":"@site/blog/2021-05-02.md","title":"#01: Introducing SWA","description":"Welcome to Week 1, Day 1 of #30DaysOfSWA!!","date":"2021-05-02T00:00:00.000Z","formattedDate":"May 2, 2021","tags":[{"label":"swa","permalink":"/30DaysOfSWA/blog/tags/swa"},{"label":"30days","permalink":"/30DaysOfSWA/blog/tags/30-days"},{"label":"core-concepts","permalink":"/30DaysOfSWA/blog/tags/core-concepts"}],"readingTime":3.685,"truncated":false,"authors":[{"name":"Simona Cotin","title":"Principal PM @Microsoft","url":"https://github.com/simonaco","imageURL":"https://github.com/simonaco.png","key":"simona"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"introducing-swa","title":"#01: Introducing SWA","authors":["simona","nitya"],"tags":["swa","30days","core-concepts"],"draft":false},"prevItem":{"title":"#02: Building SWA","permalink":"/30DaysOfSWA/blog/building-swa"},"nextItem":{"title":"Kickoff #30DaysOfSWA!","permalink":"/30DaysOfSWA/blog/kickoff"}},"content":"Welcome to `Week 1, Day 1` of **#30DaysOfSWA**!! \\n\\nThis week, we\'ll focus on the **Core Concepts** behind Azure Static Web Apps, starting with an introduction to SWA and continuing on to building, enhancing, and deploying, your SWA for users to experience. Let\'s get started today by _Introducing Static Web Apps_.\\n\\n\\n## What We\'ll Cover\\n * What is Azure Static Web Apps?\\n * How is it architected?\\n * Where can I use it?\\n * 10 Key Features to know\\n * **Exercise:** Explore SWA Examples!\\n * **Resource:** [Static Web Apps Overview](https://docs.microsoft.com/en-us/azure/static-web-apps/overview)\\n\\n![](../static/img/series/01-banner.png)\\n\\n## What is Azure SWA?\\n\\n[Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/overview) is a cloud-based service that **automatically** builds and deploys full-stack web apps to Azure **directly from your code repository**. The service works with popular code sources like GitHub, GitLab and BitBucket by default. Look for the _Deploying SWA_ post later this week where we walk through the details here.\\n\\nThe benefit to you as a developer is that it **simplifies your developer experience**. Just commit changes to your application source code into the repository and step back. The SWA service monitors the codebase for changes, automatically rebuilding and redeploying your app to the hosted endpoint. Look for a _Previewing SWA_ post later this week where we\'ll talk about built-in support for previewing apps in non-main branches, or in pull requests, that make it easier to manage apps with multiple contributors.\\n\\nPrefer a 5-minute video overview? We have you covered!\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://aka.ms/docs/player?show=azure-tips-and-tricks-static-web-apps&ep=what-is-azure-static-web-apps-and-what-can-it-be-used-for-1-of-16--azure-tips-and-tricks-static-web-\\"  frameborder=\\"0\\" ></iframe>\\n\\n## How is it Architected?\\n\\nStatic Web Apps can be built using popular front-end frameworks including React, Angular, Vue, Svelte, or Blazor. These apps typically consist of a collection of **static content assets** (HTML, JS, CSS and media files) coupled with a **dynamic API endpoint** to handle client interactions in real time.\\n\\nTraditional web application deployments use a _single web server_ to serve both the static assets and the API endpoint. This can make scaling these services sub-optimal in terms of global availability and runtime costs.\\n\\nWith Static Web Apps, we **separate static assets from API endpoints**, allowing each to be scaled using the technology best equipped to do this in a cost-effective manner.\\n * Static assets get served from geographically-distributed content servers worldwide, distributing the load and speeding up access to users nearby.\\n * API endpoints are hosted using a [serverless architecture](https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview), spinning up compute resources (to execute functions) only as needed, in response to trigger events.\\n\\nThis architecture - with static content servers, serverless backends, and automated CI/CD workflows - simplifies your development workflow **allowing you to focus your attention on the application logic and user experience** components of your modern web application.\\n\\n\\n![](../static/img/series/01-swa-overview.png)\\n\\n## Where can I use it?\\n\\nThat\'s a great question!! You can use Static Web Apps to:\\n * Build modern web apps with front-end frameworks (like Angular, React, Vue etc.)\\n * Publish static web sites (using Gatsby, Hugo, Astro, Docusaurus, VuePress etc.)\\n * Deploy web apps with frameworks like Next.js and Nuxt.js.\\n\\nYou can [**configure your existing application**](https://docs.microsoft.com/en-us/azure/static-web-apps/front-end-frameworks) to use Azure Static Web Apps using an IDE like VS Code, or using Command-line tools (like Azure CLI and SWA CLI), or through the browser (using the Azure Portal). Look for two posts later this week that dive into this in detail:\\n * _Building SWA_ (tomorrow) on getting started with using SWA in your app.\\n * _Configuring SWA_ (later) on customizing app behaviors and build process.\\n\\nBut wait - there\'s one more thing. \\n\\n**Keep an eye out for an announcement later in the series** where we\'ll be debuting a new [Community Showcase](/showcase) page - here\'s a sneak preview. You can filter it to see examples from popular front-end technologies, select \\"open source\\" to see the repository for inspiration - **and consider adding your own project** at the end of your journey!\\n\\n![](../static/img/swa-showcase.png)\\n\\n\\n## 10 Things To Know!\\n\\nWe\'ve talked about what SWA is, how it\'s architected, and where you can use it. But what are the key features that make it powerful? [**Read the Documentation**](https://docs.microsoft.com/en-us/azure/static-web-apps/overview#key-features) for the detailed list - or scan the visual guide below for a summary!\\n\\n![](../static/img/series/01-ten-things.png)\\n\\n\\n\\n## Exercise:\\n\\nThat was a lot to digest right?  It helps to see some of these ideas in action. So here\'s two things you can do before we dive into the quickstart tomorrow:\\n\\n * Visit the [Showcase Gallery](https://github.com/microsoft/static-web-apps-gallery-code-samples) repository to see some examples of SWA in Action.\\n * Follow the [#staticwebapps](https://dev.to/t/staticwebapps) tag to see community-posted articles on usage."},{"id":"kickoff","metadata":{"permalink":"/30DaysOfSWA/blog/kickoff","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-05-01.md","source":"@site/blog/2021-05-01.md","title":"Kickoff #30DaysOfSWA!","description":"Welcome to the first day of #30DaysOfSWA!!","date":"2021-05-01T00:00:00.000Z","formattedDate":"May 1, 2021","tags":[{"label":"swa","permalink":"/30DaysOfSWA/blog/tags/swa"},{"label":"30days","permalink":"/30DaysOfSWA/blog/tags/30-days"}],"readingTime":3.54,"truncated":false,"authors":[{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Reshmi Sriram","title":"PM, Static Web Apps @Microsoft","url":"https://twitter.com/reshsriram","imageURL":"https://github.com/Reshmi-Sriram.png\\\\","key":"reshmi"},{"name":"Simona Cotin","title":"Principal PM @Microsoft","url":"https://github.com/simonaco","imageURL":"https://github.com/simonaco.png","key":"simona"},{"name":"Glaucia Llemos","title":"Cloud Advocate @Microsoft","url":"https://github.com/glaucia86","imageURL":"https://github.com/glaucia86.png","key":"glaucia"},{"name":"Anthony Chu","title":"Senior PM @Microsoft","url":"https://github.com/anthonychu","imageURL":"https://github.com/anthonychu.png","key":"anthony"},{"name":"Joseph Lin","title":"Software Engineer @Microsoft","url":"https://github.com/joslinmicrosoft","imageURL":"https://github.com/joslinmicrosoft.png","key":"joseph"},{"name":"Mitali Karmarkar","title":"Software Engineer @Microsoft","url":"https://twitter.com/KarmarkarMitali","imageURL":"https://pbs.twimg.com/profile_images/1292880690237718529/yFXe2D99_400x400.jpg","key":"mitali"},{"name":"Michail Shaposhnikov","title":"Software Engineer @Microsoft","url":"https://github.com/mishapos","imageURL":"https://github.com/mishapos.png","key":"michail"}],"frontMatter":{"slug":"kickoff","title":"Kickoff #30DaysOfSWA!","authors":["nitya","reshmi","simona","glaucia","anthony","joseph","mitali","michail"],"tags":["swa","30days"],"draft":false},"prevItem":{"title":"#01: Introducing SWA","permalink":"/30DaysOfSWA/blog/introducing-swa"},"nextItem":{"title":"It\'s the SWA-anniversary!!","permalink":"/30DaysOfSWA/blog/swanniversary"}},"content":"Welcome to the first day of **#30DaysOfSWA**!!\\n\\nThank you for joining us on this fun and functional tour of **Azure Static Web Apps**. Whether you\'re new to the technology, or an experienced user, we hope there\'s something that interests and motivates you to keep going.\\n\\n![](../static/img/series/banner-kickoff.png)\\n\\n## Hello #30DaysOfSWA\\n\\nSimply put, it\'s a month-long series of blog posts that provides you a curated and structured tour through the universe of  [Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/overview?WT.mc_id=30daysofswa-61155-cxall). \\n\\n * Each article will be 5 mins or less in reading time\\n * Each ends with an activity to help reinforce the learning\\n * Articles will follow a structured roadmap over 4 weeks\\n\\nWe\'ve organized the journey into four stages, each building on the previous one in a way that mimics the developer experience with any new technology:\\n * **Week 1:** Focus on Core Concepts, learning terminology and getting setup.\\n * **Week 2:** Focus on Usage Examples with quickstarts & front-end technologies.\\n * **Week 3:** Focus on Dev Tools to develop, debug, test, and deploy, the SWA!\\n * **Week 4:** Focus on Best Practices, from services to end-to-end experiences.\\n\\n## Week 1 Roadmap\\n\\nWe are kicking off week 1 with a focus on **Core Concepts** to get you familiar with the high-level architecture, fundamental components and basic terminology for Azure Static Web Apps. Want a sneak peek at the topics? Here\'s a visual guide to help you!\\n\\n![Visual sketchnote of roadmap](../static/img/series/week1-roadmap.png)\\n\\n**By the end of week 1 you should know**:\\n * What Azure Static Web Apps is, and its benefits\\n * How to get started building SWA or using it for your existing apps\\n * How to go serverless, adding API capability with Azure Functions\\n * How to configure SWA - from app behavior to build process\\n * How to secure SWA - from user authentication to role-based authorization\\n * How to preview SWA - on pull requests or test branches\\n * How to deploy SWA - using different code sources, or CI/CD options\\n\\nBy the end of the week you should be familiar with SWA terminology and developer workflows - and be ready to explore usage scenarios with various front-end frameworks or static site generators!\\n\\n## Take The Journey\\n\\nThey say it takes 30 days to make a habit. It\'s our hope that doing short bursts of reading and activity with Azure Static Web Apps on a daily basis, will lead to better learning and development habits in general.\\n\\nWe want to make it easy for you to participate - here are options to follow along:\\n * Bookmark [this site](https://aka.ms/30DaysofSWA) and visit daily\\n * Subscribe to the [RSS Feed](https://aka.ms/30DaysOfSWA/rss) in your favorite Feed Reader\\n * Visit the [dev.to Series Page](https://dev.to/nitya/series/17901) and like, comment on, or bookmark, the posts.\\n\\nWant to really get the most from this? Try the exercises each day, and take a moment on a weekly basis, to write a blog post or capture your own notes on what your main takeaways were. As a fan of [visual storytelling](https://twitter.com/sketchthedocs) I know that writing things down helps improve your understanding and recall of the material!\\n\\n## Provide Us Feedback\\n\\n**We want to make this useful and beginner-friendly!** So if you have comments or questions that can help us improve this content, please drop us a note in our [Discussions](https://github.com/orgs/staticwebdev/discussions/categories/-30daysofswa) board!\\n\\n\\n## Meet The Authors\\n\\nArticles are written by a multi-disciplinary team of contributors from across Microsoft and the community - including members of the Static Web Apps product group and Microsoft Developer Relations. \\n\\n![Banner with people](../static/img/series/series-people.png)\\n\\nWe\'ll keep this page updated on a daily basis, to reflect the latest author whose post was published. We\'ll kick things off with the authors of this post.\\n * **Nitya Narasimhan**, Senior Cloud Advocate @Microsoft\\n * **Reshmi Sriram**, Static Web Apps PM @Microsoft\\n * _to be updated daily ..._\\n\\nEach post will identify the authors by name, and link to a relevant online profile. This series is a labor of love, so if you like a post - show that author some love by providing feedback or saying hello on their identified profile!\\n\\n---\\n\\n## Let\'s Get Started!\\n\\nI think that\'s all you need to know for now! Hope your\'re as excited as we are. Check back for the next post and ... **#LetsDoThis** !!\\n\\n![](../static/img/logo.svg)"},{"id":"swanniversary","metadata":{"permalink":"/30DaysOfSWA/blog/swanniversary","editUrl":"https://github.com/staticwebdev/30DaysOfSWA/tree/main/www/blog/2021-04-30.md","source":"@site/blog/2021-04-30.md","title":"It\'s the SWA-anniversary!!","description":"View Schedule & Speaker Lineup//aka.ms/swaanniversary","date":"2021-04-30T00:00:00.000Z","formattedDate":"April 30, 2021","tags":[{"label":"swa","permalink":"/30DaysOfSWA/blog/tags/swa"},{"label":"30days","permalink":"/30DaysOfSWA/blog/tags/30-days"},{"label":"event","permalink":"/30DaysOfSWA/blog/tags/event"}],"readingTime":2.37,"truncated":false,"authors":[{"name":"Reshmi Sriram","title":"PM, Static Web Apps @Microsoft","url":"https://twitter.com/reshsriram","imageURL":"https://github.com/Reshmi-Sriram.png\\\\","key":"reshmi"},{"name":"Nitya Narasimhan","title":"Senior Cloud Advocate @Microsoft","url":"https://twitter.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"swanniversary","title":"It\'s the SWA-anniversary!!","authors":["reshmi","nitya"],"tags":["swa","30days","event"],"draft":false},"prevItem":{"title":"Kickoff #30DaysOfSWA!","permalink":"/30DaysOfSWA/blog/kickoff"}},"content":"![](../static/img/swanniversary.png)\\n\\n#### View Schedule & Speaker Lineup: [https://aka.ms/swaanniversary](https://aka.ms/swaanniversary)\\n\\n---\\n\\nOn May 12, 2021, the [Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/overview?WT.mc_id=30daysofswa-61155-cxall) service hit a significant milestone - [becoming generally available](https://azure.microsoft.com/en-us/updates/azure-static-web-apps-is-now-generally-available/?WT.mc_id=30daysofswa-61155-cxall) with support for many of the popular [front-end frameworks and static site generators](https://docs.microsoft.com/en-us/azure/static-web-apps/front-end-frameworks) used for modern web app development.\\n\\nOn May 12, 2022, Azure Static Web Apps will make the first-year anniversary of that milestone - making this the perfect time to look back on all the progress made, and look ahead to what\'s in store next.\\n\\n\\n## Celebrate with #SWAanniversary\\n\\nOn May 19, 2022, join us live on [Learn TV](https://docs.microsoft.com/en-us/learn/tv/?WT.mc_id=30daysofswa-61155-cxall) for a 2-hour celebration with some of our favorite speakers and guests from both Microsoft and the larger developer community. Can you tell we\'re excited for this birthday?\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/OGlM5CgCwwc\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nCheck out [the Event page](https://docs.microsoft.com/en-us/events/learntv/swa-anniversary-may-2022/?WT.mc_id=30daysofswa-61155-cxall) to learn more about the speakers and topics on the agenda. Add the event to your calendar, and join us live - or bookmark this page and revisit it for links to relevant resources and video replays.\\n\\n\\n## Learn with #30DaysOfSWA\\n\\nBut there\'s more! _Are you new to Azure Static Web Apps?_ Do you want to get a beginner-friendly tour of the core concepts, usage examples, developer tools, and best practices involved in building and deploy modern web applications with this service?\\n\\n**You\'re in luck!**\\n\\nWatch this space for an update on a new content series that will help you jumpstart that learning journey! Throughout the month of May, we\'ll bring together a diverse group of technologists to share short articles with resources and insights on a curated tour of Static Web Apps - taking you from **code to scale**.\\n\\n![The #30DaysOfSWA logo](../static/img/logo-light.png)\\n\\n\\n## How Can You Participate?\\n\\nSome actions you can take today to get ready for a fun month of learning:\\n \\n  * Bookmark this Series page or [**Subscribe to the RSS feed**](https://aka.ms/30DaysOfSWA/rss)\\n  * Follow the [**#staticwebapps tag on dev.to**](https://dev.to/t/staticwebapps) - and consider making a post there!\\n  * Introduce yourself on [**our Discussions Forum**](https://github.com/orgs/staticwebdev/discussions/categories/-30daysofswa) - tell us what you hope to learn!\\n\\n\\n## Self-Study Resources\\n\\nOur goal is to help make this a beginner-friendly learning journey into Azure Static Web Apps. We hope we inspire you to keep going beyond #30Days - and wanted to share resources to motivate you to keep going. Here are three links to bookmark:\\n\\n * The [**Resources**](/resources) page - will be updated with links related to each article in the series, all through May! Use this to explore detours and deep dives.\\n * The [**Microsoft Learn Path**](https://docs.microsoft.com/en-us/learn/paths/azure-static-web-apps/?WT.mc_id=30daysofswa-61155-cxall) - teaches you how to build your first Static Web Apps powered experience - with React, Angular, Vue and Blazor coding options.\\n * The [**#30DaysOfSWA Collection**](https://docs.microsoft.com/en-us/users/nityan/collections/7d2ws6zd1mxmp6?WT.mc_id=30daysofswa-61155-cxall) - a Microsoft-specific collection of resources (from documentation to videos and code samples) that I will continue to update."}]}')}}]);